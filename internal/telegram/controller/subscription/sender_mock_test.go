package subscription

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i github.com/inqast/fsmanager/internal/telegram/controller/subscription.Sender -o ./sender_mock_test.go -n SenderMock

import (
	"fmt"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// SenderMock implements Sender
type SenderMock struct {
	t minimock.Tester

	funcSendMessage          func(i1 int64, s1 fmt.Stringer, b1 bool)
	inspectFuncSendMessage   func(i1 int64, s1 fmt.Stringer, b1 bool)
	afterSendMessageCounter  uint64
	beforeSendMessageCounter uint64
	SendMessageMock          mSenderMockSendMessage
}

// NewSenderMock returns a mock for Sender
func NewSenderMock(t minimock.Tester) *SenderMock {
	m := &SenderMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.SendMessageMock = mSenderMockSendMessage{mock: m}
	m.SendMessageMock.callArgs = []*SenderMockSendMessageParams{}

	return m
}

type mSenderMockSendMessage struct {
	mock               *SenderMock
	defaultExpectation *SenderMockSendMessageExpectation
	expectations       []*SenderMockSendMessageExpectation

	callArgs []*SenderMockSendMessageParams
	mutex    sync.RWMutex
}

// SenderMockSendMessageExpectation specifies expectation struct of the Sender.SendMessage
type SenderMockSendMessageExpectation struct {
	mock   *SenderMock
	params *SenderMockSendMessageParams

	Counter uint64
}

// SenderMockSendMessageParams contains parameters of the Sender.SendMessage
type SenderMockSendMessageParams struct {
	i1 int64
	s1 fmt.Stringer
	b1 bool
}

// Expect sets up expected params for Sender.SendMessage
func (mmSendMessage *mSenderMockSendMessage) Expect(i1 int64, s1 fmt.Stringer, b1 bool) *mSenderMockSendMessage {
	if mmSendMessage.mock.funcSendMessage != nil {
		mmSendMessage.mock.t.Fatalf("SenderMock.SendMessage mock is already set by Set")
	}

	if mmSendMessage.defaultExpectation == nil {
		mmSendMessage.defaultExpectation = &SenderMockSendMessageExpectation{}
	}

	mmSendMessage.defaultExpectation.params = &SenderMockSendMessageParams{i1, s1, b1}
	for _, e := range mmSendMessage.expectations {
		if minimock.Equal(e.params, mmSendMessage.defaultExpectation.params) {
			mmSendMessage.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSendMessage.defaultExpectation.params)
		}
	}

	return mmSendMessage
}

// Inspect accepts an inspector function that has same arguments as the Sender.SendMessage
func (mmSendMessage *mSenderMockSendMessage) Inspect(f func(i1 int64, s1 fmt.Stringer, b1 bool)) *mSenderMockSendMessage {
	if mmSendMessage.mock.inspectFuncSendMessage != nil {
		mmSendMessage.mock.t.Fatalf("Inspect function is already set for SenderMock.SendMessage")
	}

	mmSendMessage.mock.inspectFuncSendMessage = f

	return mmSendMessage
}

// Return sets up results that will be returned by Sender.SendMessage
func (mmSendMessage *mSenderMockSendMessage) Return() *SenderMock {
	if mmSendMessage.mock.funcSendMessage != nil {
		mmSendMessage.mock.t.Fatalf("SenderMock.SendMessage mock is already set by Set")
	}

	if mmSendMessage.defaultExpectation == nil {
		mmSendMessage.defaultExpectation = &SenderMockSendMessageExpectation{mock: mmSendMessage.mock}
	}

	return mmSendMessage.mock
}

//Set uses given function f to mock the Sender.SendMessage method
func (mmSendMessage *mSenderMockSendMessage) Set(f func(i1 int64, s1 fmt.Stringer, b1 bool)) *SenderMock {
	if mmSendMessage.defaultExpectation != nil {
		mmSendMessage.mock.t.Fatalf("Default expectation is already set for the Sender.SendMessage method")
	}

	if len(mmSendMessage.expectations) > 0 {
		mmSendMessage.mock.t.Fatalf("Some expectations are already set for the Sender.SendMessage method")
	}

	mmSendMessage.mock.funcSendMessage = f
	return mmSendMessage.mock
}

// SendMessage implements Sender
func (mmSendMessage *SenderMock) SendMessage(i1 int64, s1 fmt.Stringer, b1 bool) {
	mm_atomic.AddUint64(&mmSendMessage.beforeSendMessageCounter, 1)
	defer mm_atomic.AddUint64(&mmSendMessage.afterSendMessageCounter, 1)

	if mmSendMessage.inspectFuncSendMessage != nil {
		mmSendMessage.inspectFuncSendMessage(i1, s1, b1)
	}

	mm_params := &SenderMockSendMessageParams{i1, s1, b1}

	// Record call args
	mmSendMessage.SendMessageMock.mutex.Lock()
	mmSendMessage.SendMessageMock.callArgs = append(mmSendMessage.SendMessageMock.callArgs, mm_params)
	mmSendMessage.SendMessageMock.mutex.Unlock()

	for _, e := range mmSendMessage.SendMessageMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return
		}
	}

	if mmSendMessage.SendMessageMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSendMessage.SendMessageMock.defaultExpectation.Counter, 1)
		mm_want := mmSendMessage.SendMessageMock.defaultExpectation.params
		mm_got := SenderMockSendMessageParams{i1, s1, b1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSendMessage.t.Errorf("SenderMock.SendMessage got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		return

	}
	if mmSendMessage.funcSendMessage != nil {
		mmSendMessage.funcSendMessage(i1, s1, b1)
		return
	}
	mmSendMessage.t.Fatalf("Unexpected call to SenderMock.SendMessage. %v %v %v", i1, s1, b1)

}

// SendMessageAfterCounter returns a count of finished SenderMock.SendMessage invocations
func (mmSendMessage *SenderMock) SendMessageAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSendMessage.afterSendMessageCounter)
}

// SendMessageBeforeCounter returns a count of SenderMock.SendMessage invocations
func (mmSendMessage *SenderMock) SendMessageBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSendMessage.beforeSendMessageCounter)
}

// Calls returns a list of arguments used in each call to SenderMock.SendMessage.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSendMessage *mSenderMockSendMessage) Calls() []*SenderMockSendMessageParams {
	mmSendMessage.mutex.RLock()

	argCopy := make([]*SenderMockSendMessageParams, len(mmSendMessage.callArgs))
	copy(argCopy, mmSendMessage.callArgs)

	mmSendMessage.mutex.RUnlock()

	return argCopy
}

// MinimockSendMessageDone returns true if the count of the SendMessage invocations corresponds
// the number of defined expectations
func (m *SenderMock) MinimockSendMessageDone() bool {
	for _, e := range m.SendMessageMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SendMessageMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSendMessageCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSendMessage != nil && mm_atomic.LoadUint64(&m.afterSendMessageCounter) < 1 {
		return false
	}
	return true
}

// MinimockSendMessageInspect logs each unmet expectation
func (m *SenderMock) MinimockSendMessageInspect() {
	for _, e := range m.SendMessageMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to SenderMock.SendMessage with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SendMessageMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSendMessageCounter) < 1 {
		if m.SendMessageMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to SenderMock.SendMessage")
		} else {
			m.t.Errorf("Expected call to SenderMock.SendMessage with params: %#v", *m.SendMessageMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSendMessage != nil && mm_atomic.LoadUint64(&m.afterSendMessageCounter) < 1 {
		m.t.Error("Expected call to SenderMock.SendMessage")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *SenderMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockSendMessageInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *SenderMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *SenderMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockSendMessageDone()
}
