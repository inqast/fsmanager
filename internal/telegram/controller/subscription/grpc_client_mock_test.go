package subscription

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i github.com/inqast/fsmanager/internal/telegram/controller/subscription.GrpcClient -o ./grpc_client_mock_test.go -n GrpcClientMock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/inqast/fsmanager/internal/models"
)

// GrpcClientMock implements GrpcClient
type GrpcClientMock struct {
	t minimock.Tester

	funcCreateSubscriber          func(ctx context.Context, sp1 *models.Subscriber) (i1 int, err error)
	inspectFuncCreateSubscriber   func(ctx context.Context, sp1 *models.Subscriber)
	afterCreateSubscriberCounter  uint64
	beforeCreateSubscriberCounter uint64
	CreateSubscriberMock          mGrpcClientMockCreateSubscriber

	funcCreateSubscription          func(ctx context.Context, sp1 *models.Subscription) (i1 int, err error)
	inspectFuncCreateSubscription   func(ctx context.Context, sp1 *models.Subscription)
	afterCreateSubscriptionCounter  uint64
	beforeCreateSubscriptionCounter uint64
	CreateSubscriptionMock          mGrpcClientMockCreateSubscription

	funcCreateUser          func(ctx context.Context, up1 *models.User) (i1 int, err error)
	inspectFuncCreateUser   func(ctx context.Context, up1 *models.User)
	afterCreateUserCounter  uint64
	beforeCreateUserCounter uint64
	CreateUserMock          mGrpcClientMockCreateUser

	funcDeleteSubscriber          func(ctx context.Context, i1 int64) (b1 bool, err error)
	inspectFuncDeleteSubscriber   func(ctx context.Context, i1 int64)
	afterDeleteSubscriberCounter  uint64
	beforeDeleteSubscriberCounter uint64
	DeleteSubscriberMock          mGrpcClientMockDeleteSubscriber

	funcDeleteSubscription          func(ctx context.Context, i1 int64) (b1 bool, err error)
	inspectFuncDeleteSubscription   func(ctx context.Context, i1 int64)
	afterDeleteSubscriptionCounter  uint64
	beforeDeleteSubscriptionCounter uint64
	DeleteSubscriptionMock          mGrpcClientMockDeleteSubscription

	funcDeleteUser          func(ctx context.Context, i1 int64) (b1 bool, err error)
	inspectFuncDeleteUser   func(ctx context.Context, i1 int64)
	afterDeleteUserCounter  uint64
	beforeDeleteUserCounter uint64
	DeleteUserMock          mGrpcClientMockDeleteUser

	funcGetByTelegramID          func(ctx context.Context, i1 int) (up1 *models.User, err error)
	inspectFuncGetByTelegramID   func(ctx context.Context, i1 int)
	afterGetByTelegramIDCounter  uint64
	beforeGetByTelegramIDCounter uint64
	GetByTelegramIDMock          mGrpcClientMockGetByTelegramID

	funcGetSubscribers          func(ctx context.Context, i1 int) (spa1 []*models.Subscriber, err error)
	inspectFuncGetSubscribers   func(ctx context.Context, i1 int)
	afterGetSubscribersCounter  uint64
	beforeGetSubscribersCounter uint64
	GetSubscribersMock          mGrpcClientMockGetSubscribers

	funcGetSubscriptionsForUser          func(ctx context.Context, i1 int) (spa1 []*models.Subscription, err error)
	inspectFuncGetSubscriptionsForUser   func(ctx context.Context, i1 int)
	afterGetSubscriptionsForUserCounter  uint64
	beforeGetSubscriptionsForUserCounter uint64
	GetSubscriptionsForUserMock          mGrpcClientMockGetSubscriptionsForUser

	funcGetUsersByIDs          func(ctx context.Context, ia1 []int) (upa1 []*models.User, err error)
	inspectFuncGetUsersByIDs   func(ctx context.Context, ia1 []int)
	afterGetUsersByIDsCounter  uint64
	beforeGetUsersByIDsCounter uint64
	GetUsersByIDsMock          mGrpcClientMockGetUsersByIDs

	funcReadSubscriber          func(ctx context.Context, i1 int) (sp1 *models.Subscriber, err error)
	inspectFuncReadSubscriber   func(ctx context.Context, i1 int)
	afterReadSubscriberCounter  uint64
	beforeReadSubscriberCounter uint64
	ReadSubscriberMock          mGrpcClientMockReadSubscriber

	funcReadSubscription          func(ctx context.Context, i1 int) (sp1 *models.Subscription, err error)
	inspectFuncReadSubscription   func(ctx context.Context, i1 int)
	afterReadSubscriptionCounter  uint64
	beforeReadSubscriptionCounter uint64
	ReadSubscriptionMock          mGrpcClientMockReadSubscription

	funcReadUser          func(ctx context.Context, i1 int) (up1 *models.User, err error)
	inspectFuncReadUser   func(ctx context.Context, i1 int)
	afterReadUserCounter  uint64
	beforeReadUserCounter uint64
	ReadUserMock          mGrpcClientMockReadUser

	funcUpdateSubscriber          func(ctx context.Context, sp1 *models.Subscriber) (b1 bool, err error)
	inspectFuncUpdateSubscriber   func(ctx context.Context, sp1 *models.Subscriber)
	afterUpdateSubscriberCounter  uint64
	beforeUpdateSubscriberCounter uint64
	UpdateSubscriberMock          mGrpcClientMockUpdateSubscriber

	funcUpdateSubscription          func(ctx context.Context, sp1 *models.Subscription) (b1 bool, err error)
	inspectFuncUpdateSubscription   func(ctx context.Context, sp1 *models.Subscription)
	afterUpdateSubscriptionCounter  uint64
	beforeUpdateSubscriptionCounter uint64
	UpdateSubscriptionMock          mGrpcClientMockUpdateSubscription

	funcUpdateUser          func(ctx context.Context, up1 *models.User) (b1 bool, err error)
	inspectFuncUpdateUser   func(ctx context.Context, up1 *models.User)
	afterUpdateUserCounter  uint64
	beforeUpdateUserCounter uint64
	UpdateUserMock          mGrpcClientMockUpdateUser
}

// NewGrpcClientMock returns a mock for GrpcClient
func NewGrpcClientMock(t minimock.Tester) *GrpcClientMock {
	m := &GrpcClientMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateSubscriberMock = mGrpcClientMockCreateSubscriber{mock: m}
	m.CreateSubscriberMock.callArgs = []*GrpcClientMockCreateSubscriberParams{}

	m.CreateSubscriptionMock = mGrpcClientMockCreateSubscription{mock: m}
	m.CreateSubscriptionMock.callArgs = []*GrpcClientMockCreateSubscriptionParams{}

	m.CreateUserMock = mGrpcClientMockCreateUser{mock: m}
	m.CreateUserMock.callArgs = []*GrpcClientMockCreateUserParams{}

	m.DeleteSubscriberMock = mGrpcClientMockDeleteSubscriber{mock: m}
	m.DeleteSubscriberMock.callArgs = []*GrpcClientMockDeleteSubscriberParams{}

	m.DeleteSubscriptionMock = mGrpcClientMockDeleteSubscription{mock: m}
	m.DeleteSubscriptionMock.callArgs = []*GrpcClientMockDeleteSubscriptionParams{}

	m.DeleteUserMock = mGrpcClientMockDeleteUser{mock: m}
	m.DeleteUserMock.callArgs = []*GrpcClientMockDeleteUserParams{}

	m.GetByTelegramIDMock = mGrpcClientMockGetByTelegramID{mock: m}
	m.GetByTelegramIDMock.callArgs = []*GrpcClientMockGetByTelegramIDParams{}

	m.GetSubscribersMock = mGrpcClientMockGetSubscribers{mock: m}
	m.GetSubscribersMock.callArgs = []*GrpcClientMockGetSubscribersParams{}

	m.GetSubscriptionsForUserMock = mGrpcClientMockGetSubscriptionsForUser{mock: m}
	m.GetSubscriptionsForUserMock.callArgs = []*GrpcClientMockGetSubscriptionsForUserParams{}

	m.GetUsersByIDsMock = mGrpcClientMockGetUsersByIDs{mock: m}
	m.GetUsersByIDsMock.callArgs = []*GrpcClientMockGetUsersByIDsParams{}

	m.ReadSubscriberMock = mGrpcClientMockReadSubscriber{mock: m}
	m.ReadSubscriberMock.callArgs = []*GrpcClientMockReadSubscriberParams{}

	m.ReadSubscriptionMock = mGrpcClientMockReadSubscription{mock: m}
	m.ReadSubscriptionMock.callArgs = []*GrpcClientMockReadSubscriptionParams{}

	m.ReadUserMock = mGrpcClientMockReadUser{mock: m}
	m.ReadUserMock.callArgs = []*GrpcClientMockReadUserParams{}

	m.UpdateSubscriberMock = mGrpcClientMockUpdateSubscriber{mock: m}
	m.UpdateSubscriberMock.callArgs = []*GrpcClientMockUpdateSubscriberParams{}

	m.UpdateSubscriptionMock = mGrpcClientMockUpdateSubscription{mock: m}
	m.UpdateSubscriptionMock.callArgs = []*GrpcClientMockUpdateSubscriptionParams{}

	m.UpdateUserMock = mGrpcClientMockUpdateUser{mock: m}
	m.UpdateUserMock.callArgs = []*GrpcClientMockUpdateUserParams{}

	return m
}

type mGrpcClientMockCreateSubscriber struct {
	mock               *GrpcClientMock
	defaultExpectation *GrpcClientMockCreateSubscriberExpectation
	expectations       []*GrpcClientMockCreateSubscriberExpectation

	callArgs []*GrpcClientMockCreateSubscriberParams
	mutex    sync.RWMutex
}

// GrpcClientMockCreateSubscriberExpectation specifies expectation struct of the GrpcClient.CreateSubscriber
type GrpcClientMockCreateSubscriberExpectation struct {
	mock    *GrpcClientMock
	params  *GrpcClientMockCreateSubscriberParams
	results *GrpcClientMockCreateSubscriberResults
	Counter uint64
}

// GrpcClientMockCreateSubscriberParams contains parameters of the GrpcClient.CreateSubscriber
type GrpcClientMockCreateSubscriberParams struct {
	ctx context.Context
	sp1 *models.Subscriber
}

// GrpcClientMockCreateSubscriberResults contains results of the GrpcClient.CreateSubscriber
type GrpcClientMockCreateSubscriberResults struct {
	i1  int
	err error
}

// Expect sets up expected params for GrpcClient.CreateSubscriber
func (mmCreateSubscriber *mGrpcClientMockCreateSubscriber) Expect(ctx context.Context, sp1 *models.Subscriber) *mGrpcClientMockCreateSubscriber {
	if mmCreateSubscriber.mock.funcCreateSubscriber != nil {
		mmCreateSubscriber.mock.t.Fatalf("GrpcClientMock.CreateSubscriber mock is already set by Set")
	}

	if mmCreateSubscriber.defaultExpectation == nil {
		mmCreateSubscriber.defaultExpectation = &GrpcClientMockCreateSubscriberExpectation{}
	}

	mmCreateSubscriber.defaultExpectation.params = &GrpcClientMockCreateSubscriberParams{ctx, sp1}
	for _, e := range mmCreateSubscriber.expectations {
		if minimock.Equal(e.params, mmCreateSubscriber.defaultExpectation.params) {
			mmCreateSubscriber.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateSubscriber.defaultExpectation.params)
		}
	}

	return mmCreateSubscriber
}

// Inspect accepts an inspector function that has same arguments as the GrpcClient.CreateSubscriber
func (mmCreateSubscriber *mGrpcClientMockCreateSubscriber) Inspect(f func(ctx context.Context, sp1 *models.Subscriber)) *mGrpcClientMockCreateSubscriber {
	if mmCreateSubscriber.mock.inspectFuncCreateSubscriber != nil {
		mmCreateSubscriber.mock.t.Fatalf("Inspect function is already set for GrpcClientMock.CreateSubscriber")
	}

	mmCreateSubscriber.mock.inspectFuncCreateSubscriber = f

	return mmCreateSubscriber
}

// Return sets up results that will be returned by GrpcClient.CreateSubscriber
func (mmCreateSubscriber *mGrpcClientMockCreateSubscriber) Return(i1 int, err error) *GrpcClientMock {
	if mmCreateSubscriber.mock.funcCreateSubscriber != nil {
		mmCreateSubscriber.mock.t.Fatalf("GrpcClientMock.CreateSubscriber mock is already set by Set")
	}

	if mmCreateSubscriber.defaultExpectation == nil {
		mmCreateSubscriber.defaultExpectation = &GrpcClientMockCreateSubscriberExpectation{mock: mmCreateSubscriber.mock}
	}
	mmCreateSubscriber.defaultExpectation.results = &GrpcClientMockCreateSubscriberResults{i1, err}
	return mmCreateSubscriber.mock
}

//Set uses given function f to mock the GrpcClient.CreateSubscriber method
func (mmCreateSubscriber *mGrpcClientMockCreateSubscriber) Set(f func(ctx context.Context, sp1 *models.Subscriber) (i1 int, err error)) *GrpcClientMock {
	if mmCreateSubscriber.defaultExpectation != nil {
		mmCreateSubscriber.mock.t.Fatalf("Default expectation is already set for the GrpcClient.CreateSubscriber method")
	}

	if len(mmCreateSubscriber.expectations) > 0 {
		mmCreateSubscriber.mock.t.Fatalf("Some expectations are already set for the GrpcClient.CreateSubscriber method")
	}

	mmCreateSubscriber.mock.funcCreateSubscriber = f
	return mmCreateSubscriber.mock
}

// When sets expectation for the GrpcClient.CreateSubscriber which will trigger the result defined by the following
// Then helper
func (mmCreateSubscriber *mGrpcClientMockCreateSubscriber) When(ctx context.Context, sp1 *models.Subscriber) *GrpcClientMockCreateSubscriberExpectation {
	if mmCreateSubscriber.mock.funcCreateSubscriber != nil {
		mmCreateSubscriber.mock.t.Fatalf("GrpcClientMock.CreateSubscriber mock is already set by Set")
	}

	expectation := &GrpcClientMockCreateSubscriberExpectation{
		mock:   mmCreateSubscriber.mock,
		params: &GrpcClientMockCreateSubscriberParams{ctx, sp1},
	}
	mmCreateSubscriber.expectations = append(mmCreateSubscriber.expectations, expectation)
	return expectation
}

// Then sets up GrpcClient.CreateSubscriber return parameters for the expectation previously defined by the When method
func (e *GrpcClientMockCreateSubscriberExpectation) Then(i1 int, err error) *GrpcClientMock {
	e.results = &GrpcClientMockCreateSubscriberResults{i1, err}
	return e.mock
}

// CreateSubscriber implements GrpcClient
func (mmCreateSubscriber *GrpcClientMock) CreateSubscriber(ctx context.Context, sp1 *models.Subscriber) (i1 int, err error) {
	mm_atomic.AddUint64(&mmCreateSubscriber.beforeCreateSubscriberCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateSubscriber.afterCreateSubscriberCounter, 1)

	if mmCreateSubscriber.inspectFuncCreateSubscriber != nil {
		mmCreateSubscriber.inspectFuncCreateSubscriber(ctx, sp1)
	}

	mm_params := &GrpcClientMockCreateSubscriberParams{ctx, sp1}

	// Record call args
	mmCreateSubscriber.CreateSubscriberMock.mutex.Lock()
	mmCreateSubscriber.CreateSubscriberMock.callArgs = append(mmCreateSubscriber.CreateSubscriberMock.callArgs, mm_params)
	mmCreateSubscriber.CreateSubscriberMock.mutex.Unlock()

	for _, e := range mmCreateSubscriber.CreateSubscriberMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmCreateSubscriber.CreateSubscriberMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateSubscriber.CreateSubscriberMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateSubscriber.CreateSubscriberMock.defaultExpectation.params
		mm_got := GrpcClientMockCreateSubscriberParams{ctx, sp1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateSubscriber.t.Errorf("GrpcClientMock.CreateSubscriber got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateSubscriber.CreateSubscriberMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateSubscriber.t.Fatal("No results are set for the GrpcClientMock.CreateSubscriber")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmCreateSubscriber.funcCreateSubscriber != nil {
		return mmCreateSubscriber.funcCreateSubscriber(ctx, sp1)
	}
	mmCreateSubscriber.t.Fatalf("Unexpected call to GrpcClientMock.CreateSubscriber. %v %v", ctx, sp1)
	return
}

// CreateSubscriberAfterCounter returns a count of finished GrpcClientMock.CreateSubscriber invocations
func (mmCreateSubscriber *GrpcClientMock) CreateSubscriberAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateSubscriber.afterCreateSubscriberCounter)
}

// CreateSubscriberBeforeCounter returns a count of GrpcClientMock.CreateSubscriber invocations
func (mmCreateSubscriber *GrpcClientMock) CreateSubscriberBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateSubscriber.beforeCreateSubscriberCounter)
}

// Calls returns a list of arguments used in each call to GrpcClientMock.CreateSubscriber.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateSubscriber *mGrpcClientMockCreateSubscriber) Calls() []*GrpcClientMockCreateSubscriberParams {
	mmCreateSubscriber.mutex.RLock()

	argCopy := make([]*GrpcClientMockCreateSubscriberParams, len(mmCreateSubscriber.callArgs))
	copy(argCopy, mmCreateSubscriber.callArgs)

	mmCreateSubscriber.mutex.RUnlock()

	return argCopy
}

// MinimockCreateSubscriberDone returns true if the count of the CreateSubscriber invocations corresponds
// the number of defined expectations
func (m *GrpcClientMock) MinimockCreateSubscriberDone() bool {
	for _, e := range m.CreateSubscriberMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateSubscriberMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateSubscriberCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateSubscriber != nil && mm_atomic.LoadUint64(&m.afterCreateSubscriberCounter) < 1 {
		return false
	}
	return true
}

// MinimockCreateSubscriberInspect logs each unmet expectation
func (m *GrpcClientMock) MinimockCreateSubscriberInspect() {
	for _, e := range m.CreateSubscriberMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to GrpcClientMock.CreateSubscriber with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateSubscriberMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateSubscriberCounter) < 1 {
		if m.CreateSubscriberMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to GrpcClientMock.CreateSubscriber")
		} else {
			m.t.Errorf("Expected call to GrpcClientMock.CreateSubscriber with params: %#v", *m.CreateSubscriberMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateSubscriber != nil && mm_atomic.LoadUint64(&m.afterCreateSubscriberCounter) < 1 {
		m.t.Error("Expected call to GrpcClientMock.CreateSubscriber")
	}
}

type mGrpcClientMockCreateSubscription struct {
	mock               *GrpcClientMock
	defaultExpectation *GrpcClientMockCreateSubscriptionExpectation
	expectations       []*GrpcClientMockCreateSubscriptionExpectation

	callArgs []*GrpcClientMockCreateSubscriptionParams
	mutex    sync.RWMutex
}

// GrpcClientMockCreateSubscriptionExpectation specifies expectation struct of the GrpcClient.CreateSubscription
type GrpcClientMockCreateSubscriptionExpectation struct {
	mock    *GrpcClientMock
	params  *GrpcClientMockCreateSubscriptionParams
	results *GrpcClientMockCreateSubscriptionResults
	Counter uint64
}

// GrpcClientMockCreateSubscriptionParams contains parameters of the GrpcClient.CreateSubscription
type GrpcClientMockCreateSubscriptionParams struct {
	ctx context.Context
	sp1 *models.Subscription
}

// GrpcClientMockCreateSubscriptionResults contains results of the GrpcClient.CreateSubscription
type GrpcClientMockCreateSubscriptionResults struct {
	i1  int
	err error
}

// Expect sets up expected params for GrpcClient.CreateSubscription
func (mmCreateSubscription *mGrpcClientMockCreateSubscription) Expect(ctx context.Context, sp1 *models.Subscription) *mGrpcClientMockCreateSubscription {
	if mmCreateSubscription.mock.funcCreateSubscription != nil {
		mmCreateSubscription.mock.t.Fatalf("GrpcClientMock.CreateSubscription mock is already set by Set")
	}

	if mmCreateSubscription.defaultExpectation == nil {
		mmCreateSubscription.defaultExpectation = &GrpcClientMockCreateSubscriptionExpectation{}
	}

	mmCreateSubscription.defaultExpectation.params = &GrpcClientMockCreateSubscriptionParams{ctx, sp1}
	for _, e := range mmCreateSubscription.expectations {
		if minimock.Equal(e.params, mmCreateSubscription.defaultExpectation.params) {
			mmCreateSubscription.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateSubscription.defaultExpectation.params)
		}
	}

	return mmCreateSubscription
}

// Inspect accepts an inspector function that has same arguments as the GrpcClient.CreateSubscription
func (mmCreateSubscription *mGrpcClientMockCreateSubscription) Inspect(f func(ctx context.Context, sp1 *models.Subscription)) *mGrpcClientMockCreateSubscription {
	if mmCreateSubscription.mock.inspectFuncCreateSubscription != nil {
		mmCreateSubscription.mock.t.Fatalf("Inspect function is already set for GrpcClientMock.CreateSubscription")
	}

	mmCreateSubscription.mock.inspectFuncCreateSubscription = f

	return mmCreateSubscription
}

// Return sets up results that will be returned by GrpcClient.CreateSubscription
func (mmCreateSubscription *mGrpcClientMockCreateSubscription) Return(i1 int, err error) *GrpcClientMock {
	if mmCreateSubscription.mock.funcCreateSubscription != nil {
		mmCreateSubscription.mock.t.Fatalf("GrpcClientMock.CreateSubscription mock is already set by Set")
	}

	if mmCreateSubscription.defaultExpectation == nil {
		mmCreateSubscription.defaultExpectation = &GrpcClientMockCreateSubscriptionExpectation{mock: mmCreateSubscription.mock}
	}
	mmCreateSubscription.defaultExpectation.results = &GrpcClientMockCreateSubscriptionResults{i1, err}
	return mmCreateSubscription.mock
}

//Set uses given function f to mock the GrpcClient.CreateSubscription method
func (mmCreateSubscription *mGrpcClientMockCreateSubscription) Set(f func(ctx context.Context, sp1 *models.Subscription) (i1 int, err error)) *GrpcClientMock {
	if mmCreateSubscription.defaultExpectation != nil {
		mmCreateSubscription.mock.t.Fatalf("Default expectation is already set for the GrpcClient.CreateSubscription method")
	}

	if len(mmCreateSubscription.expectations) > 0 {
		mmCreateSubscription.mock.t.Fatalf("Some expectations are already set for the GrpcClient.CreateSubscription method")
	}

	mmCreateSubscription.mock.funcCreateSubscription = f
	return mmCreateSubscription.mock
}

// When sets expectation for the GrpcClient.CreateSubscription which will trigger the result defined by the following
// Then helper
func (mmCreateSubscription *mGrpcClientMockCreateSubscription) When(ctx context.Context, sp1 *models.Subscription) *GrpcClientMockCreateSubscriptionExpectation {
	if mmCreateSubscription.mock.funcCreateSubscription != nil {
		mmCreateSubscription.mock.t.Fatalf("GrpcClientMock.CreateSubscription mock is already set by Set")
	}

	expectation := &GrpcClientMockCreateSubscriptionExpectation{
		mock:   mmCreateSubscription.mock,
		params: &GrpcClientMockCreateSubscriptionParams{ctx, sp1},
	}
	mmCreateSubscription.expectations = append(mmCreateSubscription.expectations, expectation)
	return expectation
}

// Then sets up GrpcClient.CreateSubscription return parameters for the expectation previously defined by the When method
func (e *GrpcClientMockCreateSubscriptionExpectation) Then(i1 int, err error) *GrpcClientMock {
	e.results = &GrpcClientMockCreateSubscriptionResults{i1, err}
	return e.mock
}

// CreateSubscription implements GrpcClient
func (mmCreateSubscription *GrpcClientMock) CreateSubscription(ctx context.Context, sp1 *models.Subscription) (i1 int, err error) {
	mm_atomic.AddUint64(&mmCreateSubscription.beforeCreateSubscriptionCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateSubscription.afterCreateSubscriptionCounter, 1)

	if mmCreateSubscription.inspectFuncCreateSubscription != nil {
		mmCreateSubscription.inspectFuncCreateSubscription(ctx, sp1)
	}

	mm_params := &GrpcClientMockCreateSubscriptionParams{ctx, sp1}

	// Record call args
	mmCreateSubscription.CreateSubscriptionMock.mutex.Lock()
	mmCreateSubscription.CreateSubscriptionMock.callArgs = append(mmCreateSubscription.CreateSubscriptionMock.callArgs, mm_params)
	mmCreateSubscription.CreateSubscriptionMock.mutex.Unlock()

	for _, e := range mmCreateSubscription.CreateSubscriptionMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmCreateSubscription.CreateSubscriptionMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateSubscription.CreateSubscriptionMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateSubscription.CreateSubscriptionMock.defaultExpectation.params
		mm_got := GrpcClientMockCreateSubscriptionParams{ctx, sp1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateSubscription.t.Errorf("GrpcClientMock.CreateSubscription got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateSubscription.CreateSubscriptionMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateSubscription.t.Fatal("No results are set for the GrpcClientMock.CreateSubscription")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmCreateSubscription.funcCreateSubscription != nil {
		return mmCreateSubscription.funcCreateSubscription(ctx, sp1)
	}
	mmCreateSubscription.t.Fatalf("Unexpected call to GrpcClientMock.CreateSubscription. %v %v", ctx, sp1)
	return
}

// CreateSubscriptionAfterCounter returns a count of finished GrpcClientMock.CreateSubscription invocations
func (mmCreateSubscription *GrpcClientMock) CreateSubscriptionAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateSubscription.afterCreateSubscriptionCounter)
}

// CreateSubscriptionBeforeCounter returns a count of GrpcClientMock.CreateSubscription invocations
func (mmCreateSubscription *GrpcClientMock) CreateSubscriptionBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateSubscription.beforeCreateSubscriptionCounter)
}

// Calls returns a list of arguments used in each call to GrpcClientMock.CreateSubscription.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateSubscription *mGrpcClientMockCreateSubscription) Calls() []*GrpcClientMockCreateSubscriptionParams {
	mmCreateSubscription.mutex.RLock()

	argCopy := make([]*GrpcClientMockCreateSubscriptionParams, len(mmCreateSubscription.callArgs))
	copy(argCopy, mmCreateSubscription.callArgs)

	mmCreateSubscription.mutex.RUnlock()

	return argCopy
}

// MinimockCreateSubscriptionDone returns true if the count of the CreateSubscription invocations corresponds
// the number of defined expectations
func (m *GrpcClientMock) MinimockCreateSubscriptionDone() bool {
	for _, e := range m.CreateSubscriptionMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateSubscriptionMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateSubscriptionCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateSubscription != nil && mm_atomic.LoadUint64(&m.afterCreateSubscriptionCounter) < 1 {
		return false
	}
	return true
}

// MinimockCreateSubscriptionInspect logs each unmet expectation
func (m *GrpcClientMock) MinimockCreateSubscriptionInspect() {
	for _, e := range m.CreateSubscriptionMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to GrpcClientMock.CreateSubscription with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateSubscriptionMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateSubscriptionCounter) < 1 {
		if m.CreateSubscriptionMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to GrpcClientMock.CreateSubscription")
		} else {
			m.t.Errorf("Expected call to GrpcClientMock.CreateSubscription with params: %#v", *m.CreateSubscriptionMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateSubscription != nil && mm_atomic.LoadUint64(&m.afterCreateSubscriptionCounter) < 1 {
		m.t.Error("Expected call to GrpcClientMock.CreateSubscription")
	}
}

type mGrpcClientMockCreateUser struct {
	mock               *GrpcClientMock
	defaultExpectation *GrpcClientMockCreateUserExpectation
	expectations       []*GrpcClientMockCreateUserExpectation

	callArgs []*GrpcClientMockCreateUserParams
	mutex    sync.RWMutex
}

// GrpcClientMockCreateUserExpectation specifies expectation struct of the GrpcClient.CreateUser
type GrpcClientMockCreateUserExpectation struct {
	mock    *GrpcClientMock
	params  *GrpcClientMockCreateUserParams
	results *GrpcClientMockCreateUserResults
	Counter uint64
}

// GrpcClientMockCreateUserParams contains parameters of the GrpcClient.CreateUser
type GrpcClientMockCreateUserParams struct {
	ctx context.Context
	up1 *models.User
}

// GrpcClientMockCreateUserResults contains results of the GrpcClient.CreateUser
type GrpcClientMockCreateUserResults struct {
	i1  int
	err error
}

// Expect sets up expected params for GrpcClient.CreateUser
func (mmCreateUser *mGrpcClientMockCreateUser) Expect(ctx context.Context, up1 *models.User) *mGrpcClientMockCreateUser {
	if mmCreateUser.mock.funcCreateUser != nil {
		mmCreateUser.mock.t.Fatalf("GrpcClientMock.CreateUser mock is already set by Set")
	}

	if mmCreateUser.defaultExpectation == nil {
		mmCreateUser.defaultExpectation = &GrpcClientMockCreateUserExpectation{}
	}

	mmCreateUser.defaultExpectation.params = &GrpcClientMockCreateUserParams{ctx, up1}
	for _, e := range mmCreateUser.expectations {
		if minimock.Equal(e.params, mmCreateUser.defaultExpectation.params) {
			mmCreateUser.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateUser.defaultExpectation.params)
		}
	}

	return mmCreateUser
}

// Inspect accepts an inspector function that has same arguments as the GrpcClient.CreateUser
func (mmCreateUser *mGrpcClientMockCreateUser) Inspect(f func(ctx context.Context, up1 *models.User)) *mGrpcClientMockCreateUser {
	if mmCreateUser.mock.inspectFuncCreateUser != nil {
		mmCreateUser.mock.t.Fatalf("Inspect function is already set for GrpcClientMock.CreateUser")
	}

	mmCreateUser.mock.inspectFuncCreateUser = f

	return mmCreateUser
}

// Return sets up results that will be returned by GrpcClient.CreateUser
func (mmCreateUser *mGrpcClientMockCreateUser) Return(i1 int, err error) *GrpcClientMock {
	if mmCreateUser.mock.funcCreateUser != nil {
		mmCreateUser.mock.t.Fatalf("GrpcClientMock.CreateUser mock is already set by Set")
	}

	if mmCreateUser.defaultExpectation == nil {
		mmCreateUser.defaultExpectation = &GrpcClientMockCreateUserExpectation{mock: mmCreateUser.mock}
	}
	mmCreateUser.defaultExpectation.results = &GrpcClientMockCreateUserResults{i1, err}
	return mmCreateUser.mock
}

//Set uses given function f to mock the GrpcClient.CreateUser method
func (mmCreateUser *mGrpcClientMockCreateUser) Set(f func(ctx context.Context, up1 *models.User) (i1 int, err error)) *GrpcClientMock {
	if mmCreateUser.defaultExpectation != nil {
		mmCreateUser.mock.t.Fatalf("Default expectation is already set for the GrpcClient.CreateUser method")
	}

	if len(mmCreateUser.expectations) > 0 {
		mmCreateUser.mock.t.Fatalf("Some expectations are already set for the GrpcClient.CreateUser method")
	}

	mmCreateUser.mock.funcCreateUser = f
	return mmCreateUser.mock
}

// When sets expectation for the GrpcClient.CreateUser which will trigger the result defined by the following
// Then helper
func (mmCreateUser *mGrpcClientMockCreateUser) When(ctx context.Context, up1 *models.User) *GrpcClientMockCreateUserExpectation {
	if mmCreateUser.mock.funcCreateUser != nil {
		mmCreateUser.mock.t.Fatalf("GrpcClientMock.CreateUser mock is already set by Set")
	}

	expectation := &GrpcClientMockCreateUserExpectation{
		mock:   mmCreateUser.mock,
		params: &GrpcClientMockCreateUserParams{ctx, up1},
	}
	mmCreateUser.expectations = append(mmCreateUser.expectations, expectation)
	return expectation
}

// Then sets up GrpcClient.CreateUser return parameters for the expectation previously defined by the When method
func (e *GrpcClientMockCreateUserExpectation) Then(i1 int, err error) *GrpcClientMock {
	e.results = &GrpcClientMockCreateUserResults{i1, err}
	return e.mock
}

// CreateUser implements GrpcClient
func (mmCreateUser *GrpcClientMock) CreateUser(ctx context.Context, up1 *models.User) (i1 int, err error) {
	mm_atomic.AddUint64(&mmCreateUser.beforeCreateUserCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateUser.afterCreateUserCounter, 1)

	if mmCreateUser.inspectFuncCreateUser != nil {
		mmCreateUser.inspectFuncCreateUser(ctx, up1)
	}

	mm_params := &GrpcClientMockCreateUserParams{ctx, up1}

	// Record call args
	mmCreateUser.CreateUserMock.mutex.Lock()
	mmCreateUser.CreateUserMock.callArgs = append(mmCreateUser.CreateUserMock.callArgs, mm_params)
	mmCreateUser.CreateUserMock.mutex.Unlock()

	for _, e := range mmCreateUser.CreateUserMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmCreateUser.CreateUserMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateUser.CreateUserMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateUser.CreateUserMock.defaultExpectation.params
		mm_got := GrpcClientMockCreateUserParams{ctx, up1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateUser.t.Errorf("GrpcClientMock.CreateUser got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateUser.CreateUserMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateUser.t.Fatal("No results are set for the GrpcClientMock.CreateUser")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmCreateUser.funcCreateUser != nil {
		return mmCreateUser.funcCreateUser(ctx, up1)
	}
	mmCreateUser.t.Fatalf("Unexpected call to GrpcClientMock.CreateUser. %v %v", ctx, up1)
	return
}

// CreateUserAfterCounter returns a count of finished GrpcClientMock.CreateUser invocations
func (mmCreateUser *GrpcClientMock) CreateUserAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateUser.afterCreateUserCounter)
}

// CreateUserBeforeCounter returns a count of GrpcClientMock.CreateUser invocations
func (mmCreateUser *GrpcClientMock) CreateUserBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateUser.beforeCreateUserCounter)
}

// Calls returns a list of arguments used in each call to GrpcClientMock.CreateUser.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateUser *mGrpcClientMockCreateUser) Calls() []*GrpcClientMockCreateUserParams {
	mmCreateUser.mutex.RLock()

	argCopy := make([]*GrpcClientMockCreateUserParams, len(mmCreateUser.callArgs))
	copy(argCopy, mmCreateUser.callArgs)

	mmCreateUser.mutex.RUnlock()

	return argCopy
}

// MinimockCreateUserDone returns true if the count of the CreateUser invocations corresponds
// the number of defined expectations
func (m *GrpcClientMock) MinimockCreateUserDone() bool {
	for _, e := range m.CreateUserMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateUserMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateUserCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateUser != nil && mm_atomic.LoadUint64(&m.afterCreateUserCounter) < 1 {
		return false
	}
	return true
}

// MinimockCreateUserInspect logs each unmet expectation
func (m *GrpcClientMock) MinimockCreateUserInspect() {
	for _, e := range m.CreateUserMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to GrpcClientMock.CreateUser with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateUserMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateUserCounter) < 1 {
		if m.CreateUserMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to GrpcClientMock.CreateUser")
		} else {
			m.t.Errorf("Expected call to GrpcClientMock.CreateUser with params: %#v", *m.CreateUserMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateUser != nil && mm_atomic.LoadUint64(&m.afterCreateUserCounter) < 1 {
		m.t.Error("Expected call to GrpcClientMock.CreateUser")
	}
}

type mGrpcClientMockDeleteSubscriber struct {
	mock               *GrpcClientMock
	defaultExpectation *GrpcClientMockDeleteSubscriberExpectation
	expectations       []*GrpcClientMockDeleteSubscriberExpectation

	callArgs []*GrpcClientMockDeleteSubscriberParams
	mutex    sync.RWMutex
}

// GrpcClientMockDeleteSubscriberExpectation specifies expectation struct of the GrpcClient.DeleteSubscriber
type GrpcClientMockDeleteSubscriberExpectation struct {
	mock    *GrpcClientMock
	params  *GrpcClientMockDeleteSubscriberParams
	results *GrpcClientMockDeleteSubscriberResults
	Counter uint64
}

// GrpcClientMockDeleteSubscriberParams contains parameters of the GrpcClient.DeleteSubscriber
type GrpcClientMockDeleteSubscriberParams struct {
	ctx context.Context
	i1  int64
}

// GrpcClientMockDeleteSubscriberResults contains results of the GrpcClient.DeleteSubscriber
type GrpcClientMockDeleteSubscriberResults struct {
	b1  bool
	err error
}

// Expect sets up expected params for GrpcClient.DeleteSubscriber
func (mmDeleteSubscriber *mGrpcClientMockDeleteSubscriber) Expect(ctx context.Context, i1 int64) *mGrpcClientMockDeleteSubscriber {
	if mmDeleteSubscriber.mock.funcDeleteSubscriber != nil {
		mmDeleteSubscriber.mock.t.Fatalf("GrpcClientMock.DeleteSubscriber mock is already set by Set")
	}

	if mmDeleteSubscriber.defaultExpectation == nil {
		mmDeleteSubscriber.defaultExpectation = &GrpcClientMockDeleteSubscriberExpectation{}
	}

	mmDeleteSubscriber.defaultExpectation.params = &GrpcClientMockDeleteSubscriberParams{ctx, i1}
	for _, e := range mmDeleteSubscriber.expectations {
		if minimock.Equal(e.params, mmDeleteSubscriber.defaultExpectation.params) {
			mmDeleteSubscriber.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDeleteSubscriber.defaultExpectation.params)
		}
	}

	return mmDeleteSubscriber
}

// Inspect accepts an inspector function that has same arguments as the GrpcClient.DeleteSubscriber
func (mmDeleteSubscriber *mGrpcClientMockDeleteSubscriber) Inspect(f func(ctx context.Context, i1 int64)) *mGrpcClientMockDeleteSubscriber {
	if mmDeleteSubscriber.mock.inspectFuncDeleteSubscriber != nil {
		mmDeleteSubscriber.mock.t.Fatalf("Inspect function is already set for GrpcClientMock.DeleteSubscriber")
	}

	mmDeleteSubscriber.mock.inspectFuncDeleteSubscriber = f

	return mmDeleteSubscriber
}

// Return sets up results that will be returned by GrpcClient.DeleteSubscriber
func (mmDeleteSubscriber *mGrpcClientMockDeleteSubscriber) Return(b1 bool, err error) *GrpcClientMock {
	if mmDeleteSubscriber.mock.funcDeleteSubscriber != nil {
		mmDeleteSubscriber.mock.t.Fatalf("GrpcClientMock.DeleteSubscriber mock is already set by Set")
	}

	if mmDeleteSubscriber.defaultExpectation == nil {
		mmDeleteSubscriber.defaultExpectation = &GrpcClientMockDeleteSubscriberExpectation{mock: mmDeleteSubscriber.mock}
	}
	mmDeleteSubscriber.defaultExpectation.results = &GrpcClientMockDeleteSubscriberResults{b1, err}
	return mmDeleteSubscriber.mock
}

//Set uses given function f to mock the GrpcClient.DeleteSubscriber method
func (mmDeleteSubscriber *mGrpcClientMockDeleteSubscriber) Set(f func(ctx context.Context, i1 int64) (b1 bool, err error)) *GrpcClientMock {
	if mmDeleteSubscriber.defaultExpectation != nil {
		mmDeleteSubscriber.mock.t.Fatalf("Default expectation is already set for the GrpcClient.DeleteSubscriber method")
	}

	if len(mmDeleteSubscriber.expectations) > 0 {
		mmDeleteSubscriber.mock.t.Fatalf("Some expectations are already set for the GrpcClient.DeleteSubscriber method")
	}

	mmDeleteSubscriber.mock.funcDeleteSubscriber = f
	return mmDeleteSubscriber.mock
}

// When sets expectation for the GrpcClient.DeleteSubscriber which will trigger the result defined by the following
// Then helper
func (mmDeleteSubscriber *mGrpcClientMockDeleteSubscriber) When(ctx context.Context, i1 int64) *GrpcClientMockDeleteSubscriberExpectation {
	if mmDeleteSubscriber.mock.funcDeleteSubscriber != nil {
		mmDeleteSubscriber.mock.t.Fatalf("GrpcClientMock.DeleteSubscriber mock is already set by Set")
	}

	expectation := &GrpcClientMockDeleteSubscriberExpectation{
		mock:   mmDeleteSubscriber.mock,
		params: &GrpcClientMockDeleteSubscriberParams{ctx, i1},
	}
	mmDeleteSubscriber.expectations = append(mmDeleteSubscriber.expectations, expectation)
	return expectation
}

// Then sets up GrpcClient.DeleteSubscriber return parameters for the expectation previously defined by the When method
func (e *GrpcClientMockDeleteSubscriberExpectation) Then(b1 bool, err error) *GrpcClientMock {
	e.results = &GrpcClientMockDeleteSubscriberResults{b1, err}
	return e.mock
}

// DeleteSubscriber implements GrpcClient
func (mmDeleteSubscriber *GrpcClientMock) DeleteSubscriber(ctx context.Context, i1 int64) (b1 bool, err error) {
	mm_atomic.AddUint64(&mmDeleteSubscriber.beforeDeleteSubscriberCounter, 1)
	defer mm_atomic.AddUint64(&mmDeleteSubscriber.afterDeleteSubscriberCounter, 1)

	if mmDeleteSubscriber.inspectFuncDeleteSubscriber != nil {
		mmDeleteSubscriber.inspectFuncDeleteSubscriber(ctx, i1)
	}

	mm_params := &GrpcClientMockDeleteSubscriberParams{ctx, i1}

	// Record call args
	mmDeleteSubscriber.DeleteSubscriberMock.mutex.Lock()
	mmDeleteSubscriber.DeleteSubscriberMock.callArgs = append(mmDeleteSubscriber.DeleteSubscriberMock.callArgs, mm_params)
	mmDeleteSubscriber.DeleteSubscriberMock.mutex.Unlock()

	for _, e := range mmDeleteSubscriber.DeleteSubscriberMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.b1, e.results.err
		}
	}

	if mmDeleteSubscriber.DeleteSubscriberMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDeleteSubscriber.DeleteSubscriberMock.defaultExpectation.Counter, 1)
		mm_want := mmDeleteSubscriber.DeleteSubscriberMock.defaultExpectation.params
		mm_got := GrpcClientMockDeleteSubscriberParams{ctx, i1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDeleteSubscriber.t.Errorf("GrpcClientMock.DeleteSubscriber got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDeleteSubscriber.DeleteSubscriberMock.defaultExpectation.results
		if mm_results == nil {
			mmDeleteSubscriber.t.Fatal("No results are set for the GrpcClientMock.DeleteSubscriber")
		}
		return (*mm_results).b1, (*mm_results).err
	}
	if mmDeleteSubscriber.funcDeleteSubscriber != nil {
		return mmDeleteSubscriber.funcDeleteSubscriber(ctx, i1)
	}
	mmDeleteSubscriber.t.Fatalf("Unexpected call to GrpcClientMock.DeleteSubscriber. %v %v", ctx, i1)
	return
}

// DeleteSubscriberAfterCounter returns a count of finished GrpcClientMock.DeleteSubscriber invocations
func (mmDeleteSubscriber *GrpcClientMock) DeleteSubscriberAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteSubscriber.afterDeleteSubscriberCounter)
}

// DeleteSubscriberBeforeCounter returns a count of GrpcClientMock.DeleteSubscriber invocations
func (mmDeleteSubscriber *GrpcClientMock) DeleteSubscriberBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteSubscriber.beforeDeleteSubscriberCounter)
}

// Calls returns a list of arguments used in each call to GrpcClientMock.DeleteSubscriber.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDeleteSubscriber *mGrpcClientMockDeleteSubscriber) Calls() []*GrpcClientMockDeleteSubscriberParams {
	mmDeleteSubscriber.mutex.RLock()

	argCopy := make([]*GrpcClientMockDeleteSubscriberParams, len(mmDeleteSubscriber.callArgs))
	copy(argCopy, mmDeleteSubscriber.callArgs)

	mmDeleteSubscriber.mutex.RUnlock()

	return argCopy
}

// MinimockDeleteSubscriberDone returns true if the count of the DeleteSubscriber invocations corresponds
// the number of defined expectations
func (m *GrpcClientMock) MinimockDeleteSubscriberDone() bool {
	for _, e := range m.DeleteSubscriberMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteSubscriberMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDeleteSubscriberCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDeleteSubscriber != nil && mm_atomic.LoadUint64(&m.afterDeleteSubscriberCounter) < 1 {
		return false
	}
	return true
}

// MinimockDeleteSubscriberInspect logs each unmet expectation
func (m *GrpcClientMock) MinimockDeleteSubscriberInspect() {
	for _, e := range m.DeleteSubscriberMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to GrpcClientMock.DeleteSubscriber with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteSubscriberMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDeleteSubscriberCounter) < 1 {
		if m.DeleteSubscriberMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to GrpcClientMock.DeleteSubscriber")
		} else {
			m.t.Errorf("Expected call to GrpcClientMock.DeleteSubscriber with params: %#v", *m.DeleteSubscriberMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDeleteSubscriber != nil && mm_atomic.LoadUint64(&m.afterDeleteSubscriberCounter) < 1 {
		m.t.Error("Expected call to GrpcClientMock.DeleteSubscriber")
	}
}

type mGrpcClientMockDeleteSubscription struct {
	mock               *GrpcClientMock
	defaultExpectation *GrpcClientMockDeleteSubscriptionExpectation
	expectations       []*GrpcClientMockDeleteSubscriptionExpectation

	callArgs []*GrpcClientMockDeleteSubscriptionParams
	mutex    sync.RWMutex
}

// GrpcClientMockDeleteSubscriptionExpectation specifies expectation struct of the GrpcClient.DeleteSubscription
type GrpcClientMockDeleteSubscriptionExpectation struct {
	mock    *GrpcClientMock
	params  *GrpcClientMockDeleteSubscriptionParams
	results *GrpcClientMockDeleteSubscriptionResults
	Counter uint64
}

// GrpcClientMockDeleteSubscriptionParams contains parameters of the GrpcClient.DeleteSubscription
type GrpcClientMockDeleteSubscriptionParams struct {
	ctx context.Context
	i1  int64
}

// GrpcClientMockDeleteSubscriptionResults contains results of the GrpcClient.DeleteSubscription
type GrpcClientMockDeleteSubscriptionResults struct {
	b1  bool
	err error
}

// Expect sets up expected params for GrpcClient.DeleteSubscription
func (mmDeleteSubscription *mGrpcClientMockDeleteSubscription) Expect(ctx context.Context, i1 int64) *mGrpcClientMockDeleteSubscription {
	if mmDeleteSubscription.mock.funcDeleteSubscription != nil {
		mmDeleteSubscription.mock.t.Fatalf("GrpcClientMock.DeleteSubscription mock is already set by Set")
	}

	if mmDeleteSubscription.defaultExpectation == nil {
		mmDeleteSubscription.defaultExpectation = &GrpcClientMockDeleteSubscriptionExpectation{}
	}

	mmDeleteSubscription.defaultExpectation.params = &GrpcClientMockDeleteSubscriptionParams{ctx, i1}
	for _, e := range mmDeleteSubscription.expectations {
		if minimock.Equal(e.params, mmDeleteSubscription.defaultExpectation.params) {
			mmDeleteSubscription.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDeleteSubscription.defaultExpectation.params)
		}
	}

	return mmDeleteSubscription
}

// Inspect accepts an inspector function that has same arguments as the GrpcClient.DeleteSubscription
func (mmDeleteSubscription *mGrpcClientMockDeleteSubscription) Inspect(f func(ctx context.Context, i1 int64)) *mGrpcClientMockDeleteSubscription {
	if mmDeleteSubscription.mock.inspectFuncDeleteSubscription != nil {
		mmDeleteSubscription.mock.t.Fatalf("Inspect function is already set for GrpcClientMock.DeleteSubscription")
	}

	mmDeleteSubscription.mock.inspectFuncDeleteSubscription = f

	return mmDeleteSubscription
}

// Return sets up results that will be returned by GrpcClient.DeleteSubscription
func (mmDeleteSubscription *mGrpcClientMockDeleteSubscription) Return(b1 bool, err error) *GrpcClientMock {
	if mmDeleteSubscription.mock.funcDeleteSubscription != nil {
		mmDeleteSubscription.mock.t.Fatalf("GrpcClientMock.DeleteSubscription mock is already set by Set")
	}

	if mmDeleteSubscription.defaultExpectation == nil {
		mmDeleteSubscription.defaultExpectation = &GrpcClientMockDeleteSubscriptionExpectation{mock: mmDeleteSubscription.mock}
	}
	mmDeleteSubscription.defaultExpectation.results = &GrpcClientMockDeleteSubscriptionResults{b1, err}
	return mmDeleteSubscription.mock
}

//Set uses given function f to mock the GrpcClient.DeleteSubscription method
func (mmDeleteSubscription *mGrpcClientMockDeleteSubscription) Set(f func(ctx context.Context, i1 int64) (b1 bool, err error)) *GrpcClientMock {
	if mmDeleteSubscription.defaultExpectation != nil {
		mmDeleteSubscription.mock.t.Fatalf("Default expectation is already set for the GrpcClient.DeleteSubscription method")
	}

	if len(mmDeleteSubscription.expectations) > 0 {
		mmDeleteSubscription.mock.t.Fatalf("Some expectations are already set for the GrpcClient.DeleteSubscription method")
	}

	mmDeleteSubscription.mock.funcDeleteSubscription = f
	return mmDeleteSubscription.mock
}

// When sets expectation for the GrpcClient.DeleteSubscription which will trigger the result defined by the following
// Then helper
func (mmDeleteSubscription *mGrpcClientMockDeleteSubscription) When(ctx context.Context, i1 int64) *GrpcClientMockDeleteSubscriptionExpectation {
	if mmDeleteSubscription.mock.funcDeleteSubscription != nil {
		mmDeleteSubscription.mock.t.Fatalf("GrpcClientMock.DeleteSubscription mock is already set by Set")
	}

	expectation := &GrpcClientMockDeleteSubscriptionExpectation{
		mock:   mmDeleteSubscription.mock,
		params: &GrpcClientMockDeleteSubscriptionParams{ctx, i1},
	}
	mmDeleteSubscription.expectations = append(mmDeleteSubscription.expectations, expectation)
	return expectation
}

// Then sets up GrpcClient.DeleteSubscription return parameters for the expectation previously defined by the When method
func (e *GrpcClientMockDeleteSubscriptionExpectation) Then(b1 bool, err error) *GrpcClientMock {
	e.results = &GrpcClientMockDeleteSubscriptionResults{b1, err}
	return e.mock
}

// DeleteSubscription implements GrpcClient
func (mmDeleteSubscription *GrpcClientMock) DeleteSubscription(ctx context.Context, i1 int64) (b1 bool, err error) {
	mm_atomic.AddUint64(&mmDeleteSubscription.beforeDeleteSubscriptionCounter, 1)
	defer mm_atomic.AddUint64(&mmDeleteSubscription.afterDeleteSubscriptionCounter, 1)

	if mmDeleteSubscription.inspectFuncDeleteSubscription != nil {
		mmDeleteSubscription.inspectFuncDeleteSubscription(ctx, i1)
	}

	mm_params := &GrpcClientMockDeleteSubscriptionParams{ctx, i1}

	// Record call args
	mmDeleteSubscription.DeleteSubscriptionMock.mutex.Lock()
	mmDeleteSubscription.DeleteSubscriptionMock.callArgs = append(mmDeleteSubscription.DeleteSubscriptionMock.callArgs, mm_params)
	mmDeleteSubscription.DeleteSubscriptionMock.mutex.Unlock()

	for _, e := range mmDeleteSubscription.DeleteSubscriptionMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.b1, e.results.err
		}
	}

	if mmDeleteSubscription.DeleteSubscriptionMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDeleteSubscription.DeleteSubscriptionMock.defaultExpectation.Counter, 1)
		mm_want := mmDeleteSubscription.DeleteSubscriptionMock.defaultExpectation.params
		mm_got := GrpcClientMockDeleteSubscriptionParams{ctx, i1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDeleteSubscription.t.Errorf("GrpcClientMock.DeleteSubscription got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDeleteSubscription.DeleteSubscriptionMock.defaultExpectation.results
		if mm_results == nil {
			mmDeleteSubscription.t.Fatal("No results are set for the GrpcClientMock.DeleteSubscription")
		}
		return (*mm_results).b1, (*mm_results).err
	}
	if mmDeleteSubscription.funcDeleteSubscription != nil {
		return mmDeleteSubscription.funcDeleteSubscription(ctx, i1)
	}
	mmDeleteSubscription.t.Fatalf("Unexpected call to GrpcClientMock.DeleteSubscription. %v %v", ctx, i1)
	return
}

// DeleteSubscriptionAfterCounter returns a count of finished GrpcClientMock.DeleteSubscription invocations
func (mmDeleteSubscription *GrpcClientMock) DeleteSubscriptionAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteSubscription.afterDeleteSubscriptionCounter)
}

// DeleteSubscriptionBeforeCounter returns a count of GrpcClientMock.DeleteSubscription invocations
func (mmDeleteSubscription *GrpcClientMock) DeleteSubscriptionBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteSubscription.beforeDeleteSubscriptionCounter)
}

// Calls returns a list of arguments used in each call to GrpcClientMock.DeleteSubscription.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDeleteSubscription *mGrpcClientMockDeleteSubscription) Calls() []*GrpcClientMockDeleteSubscriptionParams {
	mmDeleteSubscription.mutex.RLock()

	argCopy := make([]*GrpcClientMockDeleteSubscriptionParams, len(mmDeleteSubscription.callArgs))
	copy(argCopy, mmDeleteSubscription.callArgs)

	mmDeleteSubscription.mutex.RUnlock()

	return argCopy
}

// MinimockDeleteSubscriptionDone returns true if the count of the DeleteSubscription invocations corresponds
// the number of defined expectations
func (m *GrpcClientMock) MinimockDeleteSubscriptionDone() bool {
	for _, e := range m.DeleteSubscriptionMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteSubscriptionMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDeleteSubscriptionCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDeleteSubscription != nil && mm_atomic.LoadUint64(&m.afterDeleteSubscriptionCounter) < 1 {
		return false
	}
	return true
}

// MinimockDeleteSubscriptionInspect logs each unmet expectation
func (m *GrpcClientMock) MinimockDeleteSubscriptionInspect() {
	for _, e := range m.DeleteSubscriptionMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to GrpcClientMock.DeleteSubscription with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteSubscriptionMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDeleteSubscriptionCounter) < 1 {
		if m.DeleteSubscriptionMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to GrpcClientMock.DeleteSubscription")
		} else {
			m.t.Errorf("Expected call to GrpcClientMock.DeleteSubscription with params: %#v", *m.DeleteSubscriptionMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDeleteSubscription != nil && mm_atomic.LoadUint64(&m.afterDeleteSubscriptionCounter) < 1 {
		m.t.Error("Expected call to GrpcClientMock.DeleteSubscription")
	}
}

type mGrpcClientMockDeleteUser struct {
	mock               *GrpcClientMock
	defaultExpectation *GrpcClientMockDeleteUserExpectation
	expectations       []*GrpcClientMockDeleteUserExpectation

	callArgs []*GrpcClientMockDeleteUserParams
	mutex    sync.RWMutex
}

// GrpcClientMockDeleteUserExpectation specifies expectation struct of the GrpcClient.DeleteUser
type GrpcClientMockDeleteUserExpectation struct {
	mock    *GrpcClientMock
	params  *GrpcClientMockDeleteUserParams
	results *GrpcClientMockDeleteUserResults
	Counter uint64
}

// GrpcClientMockDeleteUserParams contains parameters of the GrpcClient.DeleteUser
type GrpcClientMockDeleteUserParams struct {
	ctx context.Context
	i1  int64
}

// GrpcClientMockDeleteUserResults contains results of the GrpcClient.DeleteUser
type GrpcClientMockDeleteUserResults struct {
	b1  bool
	err error
}

// Expect sets up expected params for GrpcClient.DeleteUser
func (mmDeleteUser *mGrpcClientMockDeleteUser) Expect(ctx context.Context, i1 int64) *mGrpcClientMockDeleteUser {
	if mmDeleteUser.mock.funcDeleteUser != nil {
		mmDeleteUser.mock.t.Fatalf("GrpcClientMock.DeleteUser mock is already set by Set")
	}

	if mmDeleteUser.defaultExpectation == nil {
		mmDeleteUser.defaultExpectation = &GrpcClientMockDeleteUserExpectation{}
	}

	mmDeleteUser.defaultExpectation.params = &GrpcClientMockDeleteUserParams{ctx, i1}
	for _, e := range mmDeleteUser.expectations {
		if minimock.Equal(e.params, mmDeleteUser.defaultExpectation.params) {
			mmDeleteUser.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDeleteUser.defaultExpectation.params)
		}
	}

	return mmDeleteUser
}

// Inspect accepts an inspector function that has same arguments as the GrpcClient.DeleteUser
func (mmDeleteUser *mGrpcClientMockDeleteUser) Inspect(f func(ctx context.Context, i1 int64)) *mGrpcClientMockDeleteUser {
	if mmDeleteUser.mock.inspectFuncDeleteUser != nil {
		mmDeleteUser.mock.t.Fatalf("Inspect function is already set for GrpcClientMock.DeleteUser")
	}

	mmDeleteUser.mock.inspectFuncDeleteUser = f

	return mmDeleteUser
}

// Return sets up results that will be returned by GrpcClient.DeleteUser
func (mmDeleteUser *mGrpcClientMockDeleteUser) Return(b1 bool, err error) *GrpcClientMock {
	if mmDeleteUser.mock.funcDeleteUser != nil {
		mmDeleteUser.mock.t.Fatalf("GrpcClientMock.DeleteUser mock is already set by Set")
	}

	if mmDeleteUser.defaultExpectation == nil {
		mmDeleteUser.defaultExpectation = &GrpcClientMockDeleteUserExpectation{mock: mmDeleteUser.mock}
	}
	mmDeleteUser.defaultExpectation.results = &GrpcClientMockDeleteUserResults{b1, err}
	return mmDeleteUser.mock
}

//Set uses given function f to mock the GrpcClient.DeleteUser method
func (mmDeleteUser *mGrpcClientMockDeleteUser) Set(f func(ctx context.Context, i1 int64) (b1 bool, err error)) *GrpcClientMock {
	if mmDeleteUser.defaultExpectation != nil {
		mmDeleteUser.mock.t.Fatalf("Default expectation is already set for the GrpcClient.DeleteUser method")
	}

	if len(mmDeleteUser.expectations) > 0 {
		mmDeleteUser.mock.t.Fatalf("Some expectations are already set for the GrpcClient.DeleteUser method")
	}

	mmDeleteUser.mock.funcDeleteUser = f
	return mmDeleteUser.mock
}

// When sets expectation for the GrpcClient.DeleteUser which will trigger the result defined by the following
// Then helper
func (mmDeleteUser *mGrpcClientMockDeleteUser) When(ctx context.Context, i1 int64) *GrpcClientMockDeleteUserExpectation {
	if mmDeleteUser.mock.funcDeleteUser != nil {
		mmDeleteUser.mock.t.Fatalf("GrpcClientMock.DeleteUser mock is already set by Set")
	}

	expectation := &GrpcClientMockDeleteUserExpectation{
		mock:   mmDeleteUser.mock,
		params: &GrpcClientMockDeleteUserParams{ctx, i1},
	}
	mmDeleteUser.expectations = append(mmDeleteUser.expectations, expectation)
	return expectation
}

// Then sets up GrpcClient.DeleteUser return parameters for the expectation previously defined by the When method
func (e *GrpcClientMockDeleteUserExpectation) Then(b1 bool, err error) *GrpcClientMock {
	e.results = &GrpcClientMockDeleteUserResults{b1, err}
	return e.mock
}

// DeleteUser implements GrpcClient
func (mmDeleteUser *GrpcClientMock) DeleteUser(ctx context.Context, i1 int64) (b1 bool, err error) {
	mm_atomic.AddUint64(&mmDeleteUser.beforeDeleteUserCounter, 1)
	defer mm_atomic.AddUint64(&mmDeleteUser.afterDeleteUserCounter, 1)

	if mmDeleteUser.inspectFuncDeleteUser != nil {
		mmDeleteUser.inspectFuncDeleteUser(ctx, i1)
	}

	mm_params := &GrpcClientMockDeleteUserParams{ctx, i1}

	// Record call args
	mmDeleteUser.DeleteUserMock.mutex.Lock()
	mmDeleteUser.DeleteUserMock.callArgs = append(mmDeleteUser.DeleteUserMock.callArgs, mm_params)
	mmDeleteUser.DeleteUserMock.mutex.Unlock()

	for _, e := range mmDeleteUser.DeleteUserMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.b1, e.results.err
		}
	}

	if mmDeleteUser.DeleteUserMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDeleteUser.DeleteUserMock.defaultExpectation.Counter, 1)
		mm_want := mmDeleteUser.DeleteUserMock.defaultExpectation.params
		mm_got := GrpcClientMockDeleteUserParams{ctx, i1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDeleteUser.t.Errorf("GrpcClientMock.DeleteUser got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDeleteUser.DeleteUserMock.defaultExpectation.results
		if mm_results == nil {
			mmDeleteUser.t.Fatal("No results are set for the GrpcClientMock.DeleteUser")
		}
		return (*mm_results).b1, (*mm_results).err
	}
	if mmDeleteUser.funcDeleteUser != nil {
		return mmDeleteUser.funcDeleteUser(ctx, i1)
	}
	mmDeleteUser.t.Fatalf("Unexpected call to GrpcClientMock.DeleteUser. %v %v", ctx, i1)
	return
}

// DeleteUserAfterCounter returns a count of finished GrpcClientMock.DeleteUser invocations
func (mmDeleteUser *GrpcClientMock) DeleteUserAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteUser.afterDeleteUserCounter)
}

// DeleteUserBeforeCounter returns a count of GrpcClientMock.DeleteUser invocations
func (mmDeleteUser *GrpcClientMock) DeleteUserBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteUser.beforeDeleteUserCounter)
}

// Calls returns a list of arguments used in each call to GrpcClientMock.DeleteUser.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDeleteUser *mGrpcClientMockDeleteUser) Calls() []*GrpcClientMockDeleteUserParams {
	mmDeleteUser.mutex.RLock()

	argCopy := make([]*GrpcClientMockDeleteUserParams, len(mmDeleteUser.callArgs))
	copy(argCopy, mmDeleteUser.callArgs)

	mmDeleteUser.mutex.RUnlock()

	return argCopy
}

// MinimockDeleteUserDone returns true if the count of the DeleteUser invocations corresponds
// the number of defined expectations
func (m *GrpcClientMock) MinimockDeleteUserDone() bool {
	for _, e := range m.DeleteUserMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteUserMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDeleteUserCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDeleteUser != nil && mm_atomic.LoadUint64(&m.afterDeleteUserCounter) < 1 {
		return false
	}
	return true
}

// MinimockDeleteUserInspect logs each unmet expectation
func (m *GrpcClientMock) MinimockDeleteUserInspect() {
	for _, e := range m.DeleteUserMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to GrpcClientMock.DeleteUser with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteUserMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDeleteUserCounter) < 1 {
		if m.DeleteUserMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to GrpcClientMock.DeleteUser")
		} else {
			m.t.Errorf("Expected call to GrpcClientMock.DeleteUser with params: %#v", *m.DeleteUserMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDeleteUser != nil && mm_atomic.LoadUint64(&m.afterDeleteUserCounter) < 1 {
		m.t.Error("Expected call to GrpcClientMock.DeleteUser")
	}
}

type mGrpcClientMockGetByTelegramID struct {
	mock               *GrpcClientMock
	defaultExpectation *GrpcClientMockGetByTelegramIDExpectation
	expectations       []*GrpcClientMockGetByTelegramIDExpectation

	callArgs []*GrpcClientMockGetByTelegramIDParams
	mutex    sync.RWMutex
}

// GrpcClientMockGetByTelegramIDExpectation specifies expectation struct of the GrpcClient.GetByTelegramID
type GrpcClientMockGetByTelegramIDExpectation struct {
	mock    *GrpcClientMock
	params  *GrpcClientMockGetByTelegramIDParams
	results *GrpcClientMockGetByTelegramIDResults
	Counter uint64
}

// GrpcClientMockGetByTelegramIDParams contains parameters of the GrpcClient.GetByTelegramID
type GrpcClientMockGetByTelegramIDParams struct {
	ctx context.Context
	i1  int
}

// GrpcClientMockGetByTelegramIDResults contains results of the GrpcClient.GetByTelegramID
type GrpcClientMockGetByTelegramIDResults struct {
	up1 *models.User
	err error
}

// Expect sets up expected params for GrpcClient.GetByTelegramID
func (mmGetByTelegramID *mGrpcClientMockGetByTelegramID) Expect(ctx context.Context, i1 int) *mGrpcClientMockGetByTelegramID {
	if mmGetByTelegramID.mock.funcGetByTelegramID != nil {
		mmGetByTelegramID.mock.t.Fatalf("GrpcClientMock.GetByTelegramID mock is already set by Set")
	}

	if mmGetByTelegramID.defaultExpectation == nil {
		mmGetByTelegramID.defaultExpectation = &GrpcClientMockGetByTelegramIDExpectation{}
	}

	mmGetByTelegramID.defaultExpectation.params = &GrpcClientMockGetByTelegramIDParams{ctx, i1}
	for _, e := range mmGetByTelegramID.expectations {
		if minimock.Equal(e.params, mmGetByTelegramID.defaultExpectation.params) {
			mmGetByTelegramID.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetByTelegramID.defaultExpectation.params)
		}
	}

	return mmGetByTelegramID
}

// Inspect accepts an inspector function that has same arguments as the GrpcClient.GetByTelegramID
func (mmGetByTelegramID *mGrpcClientMockGetByTelegramID) Inspect(f func(ctx context.Context, i1 int)) *mGrpcClientMockGetByTelegramID {
	if mmGetByTelegramID.mock.inspectFuncGetByTelegramID != nil {
		mmGetByTelegramID.mock.t.Fatalf("Inspect function is already set for GrpcClientMock.GetByTelegramID")
	}

	mmGetByTelegramID.mock.inspectFuncGetByTelegramID = f

	return mmGetByTelegramID
}

// Return sets up results that will be returned by GrpcClient.GetByTelegramID
func (mmGetByTelegramID *mGrpcClientMockGetByTelegramID) Return(up1 *models.User, err error) *GrpcClientMock {
	if mmGetByTelegramID.mock.funcGetByTelegramID != nil {
		mmGetByTelegramID.mock.t.Fatalf("GrpcClientMock.GetByTelegramID mock is already set by Set")
	}

	if mmGetByTelegramID.defaultExpectation == nil {
		mmGetByTelegramID.defaultExpectation = &GrpcClientMockGetByTelegramIDExpectation{mock: mmGetByTelegramID.mock}
	}
	mmGetByTelegramID.defaultExpectation.results = &GrpcClientMockGetByTelegramIDResults{up1, err}
	return mmGetByTelegramID.mock
}

//Set uses given function f to mock the GrpcClient.GetByTelegramID method
func (mmGetByTelegramID *mGrpcClientMockGetByTelegramID) Set(f func(ctx context.Context, i1 int) (up1 *models.User, err error)) *GrpcClientMock {
	if mmGetByTelegramID.defaultExpectation != nil {
		mmGetByTelegramID.mock.t.Fatalf("Default expectation is already set for the GrpcClient.GetByTelegramID method")
	}

	if len(mmGetByTelegramID.expectations) > 0 {
		mmGetByTelegramID.mock.t.Fatalf("Some expectations are already set for the GrpcClient.GetByTelegramID method")
	}

	mmGetByTelegramID.mock.funcGetByTelegramID = f
	return mmGetByTelegramID.mock
}

// When sets expectation for the GrpcClient.GetByTelegramID which will trigger the result defined by the following
// Then helper
func (mmGetByTelegramID *mGrpcClientMockGetByTelegramID) When(ctx context.Context, i1 int) *GrpcClientMockGetByTelegramIDExpectation {
	if mmGetByTelegramID.mock.funcGetByTelegramID != nil {
		mmGetByTelegramID.mock.t.Fatalf("GrpcClientMock.GetByTelegramID mock is already set by Set")
	}

	expectation := &GrpcClientMockGetByTelegramIDExpectation{
		mock:   mmGetByTelegramID.mock,
		params: &GrpcClientMockGetByTelegramIDParams{ctx, i1},
	}
	mmGetByTelegramID.expectations = append(mmGetByTelegramID.expectations, expectation)
	return expectation
}

// Then sets up GrpcClient.GetByTelegramID return parameters for the expectation previously defined by the When method
func (e *GrpcClientMockGetByTelegramIDExpectation) Then(up1 *models.User, err error) *GrpcClientMock {
	e.results = &GrpcClientMockGetByTelegramIDResults{up1, err}
	return e.mock
}

// GetByTelegramID implements GrpcClient
func (mmGetByTelegramID *GrpcClientMock) GetByTelegramID(ctx context.Context, i1 int) (up1 *models.User, err error) {
	mm_atomic.AddUint64(&mmGetByTelegramID.beforeGetByTelegramIDCounter, 1)
	defer mm_atomic.AddUint64(&mmGetByTelegramID.afterGetByTelegramIDCounter, 1)

	if mmGetByTelegramID.inspectFuncGetByTelegramID != nil {
		mmGetByTelegramID.inspectFuncGetByTelegramID(ctx, i1)
	}

	mm_params := &GrpcClientMockGetByTelegramIDParams{ctx, i1}

	// Record call args
	mmGetByTelegramID.GetByTelegramIDMock.mutex.Lock()
	mmGetByTelegramID.GetByTelegramIDMock.callArgs = append(mmGetByTelegramID.GetByTelegramIDMock.callArgs, mm_params)
	mmGetByTelegramID.GetByTelegramIDMock.mutex.Unlock()

	for _, e := range mmGetByTelegramID.GetByTelegramIDMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.up1, e.results.err
		}
	}

	if mmGetByTelegramID.GetByTelegramIDMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetByTelegramID.GetByTelegramIDMock.defaultExpectation.Counter, 1)
		mm_want := mmGetByTelegramID.GetByTelegramIDMock.defaultExpectation.params
		mm_got := GrpcClientMockGetByTelegramIDParams{ctx, i1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetByTelegramID.t.Errorf("GrpcClientMock.GetByTelegramID got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetByTelegramID.GetByTelegramIDMock.defaultExpectation.results
		if mm_results == nil {
			mmGetByTelegramID.t.Fatal("No results are set for the GrpcClientMock.GetByTelegramID")
		}
		return (*mm_results).up1, (*mm_results).err
	}
	if mmGetByTelegramID.funcGetByTelegramID != nil {
		return mmGetByTelegramID.funcGetByTelegramID(ctx, i1)
	}
	mmGetByTelegramID.t.Fatalf("Unexpected call to GrpcClientMock.GetByTelegramID. %v %v", ctx, i1)
	return
}

// GetByTelegramIDAfterCounter returns a count of finished GrpcClientMock.GetByTelegramID invocations
func (mmGetByTelegramID *GrpcClientMock) GetByTelegramIDAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetByTelegramID.afterGetByTelegramIDCounter)
}

// GetByTelegramIDBeforeCounter returns a count of GrpcClientMock.GetByTelegramID invocations
func (mmGetByTelegramID *GrpcClientMock) GetByTelegramIDBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetByTelegramID.beforeGetByTelegramIDCounter)
}

// Calls returns a list of arguments used in each call to GrpcClientMock.GetByTelegramID.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetByTelegramID *mGrpcClientMockGetByTelegramID) Calls() []*GrpcClientMockGetByTelegramIDParams {
	mmGetByTelegramID.mutex.RLock()

	argCopy := make([]*GrpcClientMockGetByTelegramIDParams, len(mmGetByTelegramID.callArgs))
	copy(argCopy, mmGetByTelegramID.callArgs)

	mmGetByTelegramID.mutex.RUnlock()

	return argCopy
}

// MinimockGetByTelegramIDDone returns true if the count of the GetByTelegramID invocations corresponds
// the number of defined expectations
func (m *GrpcClientMock) MinimockGetByTelegramIDDone() bool {
	for _, e := range m.GetByTelegramIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetByTelegramIDMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetByTelegramIDCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetByTelegramID != nil && mm_atomic.LoadUint64(&m.afterGetByTelegramIDCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetByTelegramIDInspect logs each unmet expectation
func (m *GrpcClientMock) MinimockGetByTelegramIDInspect() {
	for _, e := range m.GetByTelegramIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to GrpcClientMock.GetByTelegramID with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetByTelegramIDMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetByTelegramIDCounter) < 1 {
		if m.GetByTelegramIDMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to GrpcClientMock.GetByTelegramID")
		} else {
			m.t.Errorf("Expected call to GrpcClientMock.GetByTelegramID with params: %#v", *m.GetByTelegramIDMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetByTelegramID != nil && mm_atomic.LoadUint64(&m.afterGetByTelegramIDCounter) < 1 {
		m.t.Error("Expected call to GrpcClientMock.GetByTelegramID")
	}
}

type mGrpcClientMockGetSubscribers struct {
	mock               *GrpcClientMock
	defaultExpectation *GrpcClientMockGetSubscribersExpectation
	expectations       []*GrpcClientMockGetSubscribersExpectation

	callArgs []*GrpcClientMockGetSubscribersParams
	mutex    sync.RWMutex
}

// GrpcClientMockGetSubscribersExpectation specifies expectation struct of the GrpcClient.GetSubscribers
type GrpcClientMockGetSubscribersExpectation struct {
	mock    *GrpcClientMock
	params  *GrpcClientMockGetSubscribersParams
	results *GrpcClientMockGetSubscribersResults
	Counter uint64
}

// GrpcClientMockGetSubscribersParams contains parameters of the GrpcClient.GetSubscribers
type GrpcClientMockGetSubscribersParams struct {
	ctx context.Context
	i1  int
}

// GrpcClientMockGetSubscribersResults contains results of the GrpcClient.GetSubscribers
type GrpcClientMockGetSubscribersResults struct {
	spa1 []*models.Subscriber
	err  error
}

// Expect sets up expected params for GrpcClient.GetSubscribers
func (mmGetSubscribers *mGrpcClientMockGetSubscribers) Expect(ctx context.Context, i1 int) *mGrpcClientMockGetSubscribers {
	if mmGetSubscribers.mock.funcGetSubscribers != nil {
		mmGetSubscribers.mock.t.Fatalf("GrpcClientMock.GetSubscribers mock is already set by Set")
	}

	if mmGetSubscribers.defaultExpectation == nil {
		mmGetSubscribers.defaultExpectation = &GrpcClientMockGetSubscribersExpectation{}
	}

	mmGetSubscribers.defaultExpectation.params = &GrpcClientMockGetSubscribersParams{ctx, i1}
	for _, e := range mmGetSubscribers.expectations {
		if minimock.Equal(e.params, mmGetSubscribers.defaultExpectation.params) {
			mmGetSubscribers.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetSubscribers.defaultExpectation.params)
		}
	}

	return mmGetSubscribers
}

// Inspect accepts an inspector function that has same arguments as the GrpcClient.GetSubscribers
func (mmGetSubscribers *mGrpcClientMockGetSubscribers) Inspect(f func(ctx context.Context, i1 int)) *mGrpcClientMockGetSubscribers {
	if mmGetSubscribers.mock.inspectFuncGetSubscribers != nil {
		mmGetSubscribers.mock.t.Fatalf("Inspect function is already set for GrpcClientMock.GetSubscribers")
	}

	mmGetSubscribers.mock.inspectFuncGetSubscribers = f

	return mmGetSubscribers
}

// Return sets up results that will be returned by GrpcClient.GetSubscribers
func (mmGetSubscribers *mGrpcClientMockGetSubscribers) Return(spa1 []*models.Subscriber, err error) *GrpcClientMock {
	if mmGetSubscribers.mock.funcGetSubscribers != nil {
		mmGetSubscribers.mock.t.Fatalf("GrpcClientMock.GetSubscribers mock is already set by Set")
	}

	if mmGetSubscribers.defaultExpectation == nil {
		mmGetSubscribers.defaultExpectation = &GrpcClientMockGetSubscribersExpectation{mock: mmGetSubscribers.mock}
	}
	mmGetSubscribers.defaultExpectation.results = &GrpcClientMockGetSubscribersResults{spa1, err}
	return mmGetSubscribers.mock
}

//Set uses given function f to mock the GrpcClient.GetSubscribers method
func (mmGetSubscribers *mGrpcClientMockGetSubscribers) Set(f func(ctx context.Context, i1 int) (spa1 []*models.Subscriber, err error)) *GrpcClientMock {
	if mmGetSubscribers.defaultExpectation != nil {
		mmGetSubscribers.mock.t.Fatalf("Default expectation is already set for the GrpcClient.GetSubscribers method")
	}

	if len(mmGetSubscribers.expectations) > 0 {
		mmGetSubscribers.mock.t.Fatalf("Some expectations are already set for the GrpcClient.GetSubscribers method")
	}

	mmGetSubscribers.mock.funcGetSubscribers = f
	return mmGetSubscribers.mock
}

// When sets expectation for the GrpcClient.GetSubscribers which will trigger the result defined by the following
// Then helper
func (mmGetSubscribers *mGrpcClientMockGetSubscribers) When(ctx context.Context, i1 int) *GrpcClientMockGetSubscribersExpectation {
	if mmGetSubscribers.mock.funcGetSubscribers != nil {
		mmGetSubscribers.mock.t.Fatalf("GrpcClientMock.GetSubscribers mock is already set by Set")
	}

	expectation := &GrpcClientMockGetSubscribersExpectation{
		mock:   mmGetSubscribers.mock,
		params: &GrpcClientMockGetSubscribersParams{ctx, i1},
	}
	mmGetSubscribers.expectations = append(mmGetSubscribers.expectations, expectation)
	return expectation
}

// Then sets up GrpcClient.GetSubscribers return parameters for the expectation previously defined by the When method
func (e *GrpcClientMockGetSubscribersExpectation) Then(spa1 []*models.Subscriber, err error) *GrpcClientMock {
	e.results = &GrpcClientMockGetSubscribersResults{spa1, err}
	return e.mock
}

// GetSubscribers implements GrpcClient
func (mmGetSubscribers *GrpcClientMock) GetSubscribers(ctx context.Context, i1 int) (spa1 []*models.Subscriber, err error) {
	mm_atomic.AddUint64(&mmGetSubscribers.beforeGetSubscribersCounter, 1)
	defer mm_atomic.AddUint64(&mmGetSubscribers.afterGetSubscribersCounter, 1)

	if mmGetSubscribers.inspectFuncGetSubscribers != nil {
		mmGetSubscribers.inspectFuncGetSubscribers(ctx, i1)
	}

	mm_params := &GrpcClientMockGetSubscribersParams{ctx, i1}

	// Record call args
	mmGetSubscribers.GetSubscribersMock.mutex.Lock()
	mmGetSubscribers.GetSubscribersMock.callArgs = append(mmGetSubscribers.GetSubscribersMock.callArgs, mm_params)
	mmGetSubscribers.GetSubscribersMock.mutex.Unlock()

	for _, e := range mmGetSubscribers.GetSubscribersMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.spa1, e.results.err
		}
	}

	if mmGetSubscribers.GetSubscribersMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetSubscribers.GetSubscribersMock.defaultExpectation.Counter, 1)
		mm_want := mmGetSubscribers.GetSubscribersMock.defaultExpectation.params
		mm_got := GrpcClientMockGetSubscribersParams{ctx, i1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetSubscribers.t.Errorf("GrpcClientMock.GetSubscribers got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetSubscribers.GetSubscribersMock.defaultExpectation.results
		if mm_results == nil {
			mmGetSubscribers.t.Fatal("No results are set for the GrpcClientMock.GetSubscribers")
		}
		return (*mm_results).spa1, (*mm_results).err
	}
	if mmGetSubscribers.funcGetSubscribers != nil {
		return mmGetSubscribers.funcGetSubscribers(ctx, i1)
	}
	mmGetSubscribers.t.Fatalf("Unexpected call to GrpcClientMock.GetSubscribers. %v %v", ctx, i1)
	return
}

// GetSubscribersAfterCounter returns a count of finished GrpcClientMock.GetSubscribers invocations
func (mmGetSubscribers *GrpcClientMock) GetSubscribersAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetSubscribers.afterGetSubscribersCounter)
}

// GetSubscribersBeforeCounter returns a count of GrpcClientMock.GetSubscribers invocations
func (mmGetSubscribers *GrpcClientMock) GetSubscribersBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetSubscribers.beforeGetSubscribersCounter)
}

// Calls returns a list of arguments used in each call to GrpcClientMock.GetSubscribers.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetSubscribers *mGrpcClientMockGetSubscribers) Calls() []*GrpcClientMockGetSubscribersParams {
	mmGetSubscribers.mutex.RLock()

	argCopy := make([]*GrpcClientMockGetSubscribersParams, len(mmGetSubscribers.callArgs))
	copy(argCopy, mmGetSubscribers.callArgs)

	mmGetSubscribers.mutex.RUnlock()

	return argCopy
}

// MinimockGetSubscribersDone returns true if the count of the GetSubscribers invocations corresponds
// the number of defined expectations
func (m *GrpcClientMock) MinimockGetSubscribersDone() bool {
	for _, e := range m.GetSubscribersMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetSubscribersMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetSubscribersCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetSubscribers != nil && mm_atomic.LoadUint64(&m.afterGetSubscribersCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetSubscribersInspect logs each unmet expectation
func (m *GrpcClientMock) MinimockGetSubscribersInspect() {
	for _, e := range m.GetSubscribersMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to GrpcClientMock.GetSubscribers with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetSubscribersMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetSubscribersCounter) < 1 {
		if m.GetSubscribersMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to GrpcClientMock.GetSubscribers")
		} else {
			m.t.Errorf("Expected call to GrpcClientMock.GetSubscribers with params: %#v", *m.GetSubscribersMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetSubscribers != nil && mm_atomic.LoadUint64(&m.afterGetSubscribersCounter) < 1 {
		m.t.Error("Expected call to GrpcClientMock.GetSubscribers")
	}
}

type mGrpcClientMockGetSubscriptionsForUser struct {
	mock               *GrpcClientMock
	defaultExpectation *GrpcClientMockGetSubscriptionsForUserExpectation
	expectations       []*GrpcClientMockGetSubscriptionsForUserExpectation

	callArgs []*GrpcClientMockGetSubscriptionsForUserParams
	mutex    sync.RWMutex
}

// GrpcClientMockGetSubscriptionsForUserExpectation specifies expectation struct of the GrpcClient.GetSubscriptionsForUser
type GrpcClientMockGetSubscriptionsForUserExpectation struct {
	mock    *GrpcClientMock
	params  *GrpcClientMockGetSubscriptionsForUserParams
	results *GrpcClientMockGetSubscriptionsForUserResults
	Counter uint64
}

// GrpcClientMockGetSubscriptionsForUserParams contains parameters of the GrpcClient.GetSubscriptionsForUser
type GrpcClientMockGetSubscriptionsForUserParams struct {
	ctx context.Context
	i1  int
}

// GrpcClientMockGetSubscriptionsForUserResults contains results of the GrpcClient.GetSubscriptionsForUser
type GrpcClientMockGetSubscriptionsForUserResults struct {
	spa1 []*models.Subscription
	err  error
}

// Expect sets up expected params for GrpcClient.GetSubscriptionsForUser
func (mmGetSubscriptionsForUser *mGrpcClientMockGetSubscriptionsForUser) Expect(ctx context.Context, i1 int) *mGrpcClientMockGetSubscriptionsForUser {
	if mmGetSubscriptionsForUser.mock.funcGetSubscriptionsForUser != nil {
		mmGetSubscriptionsForUser.mock.t.Fatalf("GrpcClientMock.GetSubscriptionsForUser mock is already set by Set")
	}

	if mmGetSubscriptionsForUser.defaultExpectation == nil {
		mmGetSubscriptionsForUser.defaultExpectation = &GrpcClientMockGetSubscriptionsForUserExpectation{}
	}

	mmGetSubscriptionsForUser.defaultExpectation.params = &GrpcClientMockGetSubscriptionsForUserParams{ctx, i1}
	for _, e := range mmGetSubscriptionsForUser.expectations {
		if minimock.Equal(e.params, mmGetSubscriptionsForUser.defaultExpectation.params) {
			mmGetSubscriptionsForUser.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetSubscriptionsForUser.defaultExpectation.params)
		}
	}

	return mmGetSubscriptionsForUser
}

// Inspect accepts an inspector function that has same arguments as the GrpcClient.GetSubscriptionsForUser
func (mmGetSubscriptionsForUser *mGrpcClientMockGetSubscriptionsForUser) Inspect(f func(ctx context.Context, i1 int)) *mGrpcClientMockGetSubscriptionsForUser {
	if mmGetSubscriptionsForUser.mock.inspectFuncGetSubscriptionsForUser != nil {
		mmGetSubscriptionsForUser.mock.t.Fatalf("Inspect function is already set for GrpcClientMock.GetSubscriptionsForUser")
	}

	mmGetSubscriptionsForUser.mock.inspectFuncGetSubscriptionsForUser = f

	return mmGetSubscriptionsForUser
}

// Return sets up results that will be returned by GrpcClient.GetSubscriptionsForUser
func (mmGetSubscriptionsForUser *mGrpcClientMockGetSubscriptionsForUser) Return(spa1 []*models.Subscription, err error) *GrpcClientMock {
	if mmGetSubscriptionsForUser.mock.funcGetSubscriptionsForUser != nil {
		mmGetSubscriptionsForUser.mock.t.Fatalf("GrpcClientMock.GetSubscriptionsForUser mock is already set by Set")
	}

	if mmGetSubscriptionsForUser.defaultExpectation == nil {
		mmGetSubscriptionsForUser.defaultExpectation = &GrpcClientMockGetSubscriptionsForUserExpectation{mock: mmGetSubscriptionsForUser.mock}
	}
	mmGetSubscriptionsForUser.defaultExpectation.results = &GrpcClientMockGetSubscriptionsForUserResults{spa1, err}
	return mmGetSubscriptionsForUser.mock
}

//Set uses given function f to mock the GrpcClient.GetSubscriptionsForUser method
func (mmGetSubscriptionsForUser *mGrpcClientMockGetSubscriptionsForUser) Set(f func(ctx context.Context, i1 int) (spa1 []*models.Subscription, err error)) *GrpcClientMock {
	if mmGetSubscriptionsForUser.defaultExpectation != nil {
		mmGetSubscriptionsForUser.mock.t.Fatalf("Default expectation is already set for the GrpcClient.GetSubscriptionsForUser method")
	}

	if len(mmGetSubscriptionsForUser.expectations) > 0 {
		mmGetSubscriptionsForUser.mock.t.Fatalf("Some expectations are already set for the GrpcClient.GetSubscriptionsForUser method")
	}

	mmGetSubscriptionsForUser.mock.funcGetSubscriptionsForUser = f
	return mmGetSubscriptionsForUser.mock
}

// When sets expectation for the GrpcClient.GetSubscriptionsForUser which will trigger the result defined by the following
// Then helper
func (mmGetSubscriptionsForUser *mGrpcClientMockGetSubscriptionsForUser) When(ctx context.Context, i1 int) *GrpcClientMockGetSubscriptionsForUserExpectation {
	if mmGetSubscriptionsForUser.mock.funcGetSubscriptionsForUser != nil {
		mmGetSubscriptionsForUser.mock.t.Fatalf("GrpcClientMock.GetSubscriptionsForUser mock is already set by Set")
	}

	expectation := &GrpcClientMockGetSubscriptionsForUserExpectation{
		mock:   mmGetSubscriptionsForUser.mock,
		params: &GrpcClientMockGetSubscriptionsForUserParams{ctx, i1},
	}
	mmGetSubscriptionsForUser.expectations = append(mmGetSubscriptionsForUser.expectations, expectation)
	return expectation
}

// Then sets up GrpcClient.GetSubscriptionsForUser return parameters for the expectation previously defined by the When method
func (e *GrpcClientMockGetSubscriptionsForUserExpectation) Then(spa1 []*models.Subscription, err error) *GrpcClientMock {
	e.results = &GrpcClientMockGetSubscriptionsForUserResults{spa1, err}
	return e.mock
}

// GetSubscriptionsForUser implements GrpcClient
func (mmGetSubscriptionsForUser *GrpcClientMock) GetSubscriptionsForUser(ctx context.Context, i1 int) (spa1 []*models.Subscription, err error) {
	mm_atomic.AddUint64(&mmGetSubscriptionsForUser.beforeGetSubscriptionsForUserCounter, 1)
	defer mm_atomic.AddUint64(&mmGetSubscriptionsForUser.afterGetSubscriptionsForUserCounter, 1)

	if mmGetSubscriptionsForUser.inspectFuncGetSubscriptionsForUser != nil {
		mmGetSubscriptionsForUser.inspectFuncGetSubscriptionsForUser(ctx, i1)
	}

	mm_params := &GrpcClientMockGetSubscriptionsForUserParams{ctx, i1}

	// Record call args
	mmGetSubscriptionsForUser.GetSubscriptionsForUserMock.mutex.Lock()
	mmGetSubscriptionsForUser.GetSubscriptionsForUserMock.callArgs = append(mmGetSubscriptionsForUser.GetSubscriptionsForUserMock.callArgs, mm_params)
	mmGetSubscriptionsForUser.GetSubscriptionsForUserMock.mutex.Unlock()

	for _, e := range mmGetSubscriptionsForUser.GetSubscriptionsForUserMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.spa1, e.results.err
		}
	}

	if mmGetSubscriptionsForUser.GetSubscriptionsForUserMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetSubscriptionsForUser.GetSubscriptionsForUserMock.defaultExpectation.Counter, 1)
		mm_want := mmGetSubscriptionsForUser.GetSubscriptionsForUserMock.defaultExpectation.params
		mm_got := GrpcClientMockGetSubscriptionsForUserParams{ctx, i1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetSubscriptionsForUser.t.Errorf("GrpcClientMock.GetSubscriptionsForUser got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetSubscriptionsForUser.GetSubscriptionsForUserMock.defaultExpectation.results
		if mm_results == nil {
			mmGetSubscriptionsForUser.t.Fatal("No results are set for the GrpcClientMock.GetSubscriptionsForUser")
		}
		return (*mm_results).spa1, (*mm_results).err
	}
	if mmGetSubscriptionsForUser.funcGetSubscriptionsForUser != nil {
		return mmGetSubscriptionsForUser.funcGetSubscriptionsForUser(ctx, i1)
	}
	mmGetSubscriptionsForUser.t.Fatalf("Unexpected call to GrpcClientMock.GetSubscriptionsForUser. %v %v", ctx, i1)
	return
}

// GetSubscriptionsForUserAfterCounter returns a count of finished GrpcClientMock.GetSubscriptionsForUser invocations
func (mmGetSubscriptionsForUser *GrpcClientMock) GetSubscriptionsForUserAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetSubscriptionsForUser.afterGetSubscriptionsForUserCounter)
}

// GetSubscriptionsForUserBeforeCounter returns a count of GrpcClientMock.GetSubscriptionsForUser invocations
func (mmGetSubscriptionsForUser *GrpcClientMock) GetSubscriptionsForUserBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetSubscriptionsForUser.beforeGetSubscriptionsForUserCounter)
}

// Calls returns a list of arguments used in each call to GrpcClientMock.GetSubscriptionsForUser.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetSubscriptionsForUser *mGrpcClientMockGetSubscriptionsForUser) Calls() []*GrpcClientMockGetSubscriptionsForUserParams {
	mmGetSubscriptionsForUser.mutex.RLock()

	argCopy := make([]*GrpcClientMockGetSubscriptionsForUserParams, len(mmGetSubscriptionsForUser.callArgs))
	copy(argCopy, mmGetSubscriptionsForUser.callArgs)

	mmGetSubscriptionsForUser.mutex.RUnlock()

	return argCopy
}

// MinimockGetSubscriptionsForUserDone returns true if the count of the GetSubscriptionsForUser invocations corresponds
// the number of defined expectations
func (m *GrpcClientMock) MinimockGetSubscriptionsForUserDone() bool {
	for _, e := range m.GetSubscriptionsForUserMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetSubscriptionsForUserMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetSubscriptionsForUserCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetSubscriptionsForUser != nil && mm_atomic.LoadUint64(&m.afterGetSubscriptionsForUserCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetSubscriptionsForUserInspect logs each unmet expectation
func (m *GrpcClientMock) MinimockGetSubscriptionsForUserInspect() {
	for _, e := range m.GetSubscriptionsForUserMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to GrpcClientMock.GetSubscriptionsForUser with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetSubscriptionsForUserMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetSubscriptionsForUserCounter) < 1 {
		if m.GetSubscriptionsForUserMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to GrpcClientMock.GetSubscriptionsForUser")
		} else {
			m.t.Errorf("Expected call to GrpcClientMock.GetSubscriptionsForUser with params: %#v", *m.GetSubscriptionsForUserMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetSubscriptionsForUser != nil && mm_atomic.LoadUint64(&m.afterGetSubscriptionsForUserCounter) < 1 {
		m.t.Error("Expected call to GrpcClientMock.GetSubscriptionsForUser")
	}
}

type mGrpcClientMockGetUsersByIDs struct {
	mock               *GrpcClientMock
	defaultExpectation *GrpcClientMockGetUsersByIDsExpectation
	expectations       []*GrpcClientMockGetUsersByIDsExpectation

	callArgs []*GrpcClientMockGetUsersByIDsParams
	mutex    sync.RWMutex
}

// GrpcClientMockGetUsersByIDsExpectation specifies expectation struct of the GrpcClient.GetUsersByIDs
type GrpcClientMockGetUsersByIDsExpectation struct {
	mock    *GrpcClientMock
	params  *GrpcClientMockGetUsersByIDsParams
	results *GrpcClientMockGetUsersByIDsResults
	Counter uint64
}

// GrpcClientMockGetUsersByIDsParams contains parameters of the GrpcClient.GetUsersByIDs
type GrpcClientMockGetUsersByIDsParams struct {
	ctx context.Context
	ia1 []int
}

// GrpcClientMockGetUsersByIDsResults contains results of the GrpcClient.GetUsersByIDs
type GrpcClientMockGetUsersByIDsResults struct {
	upa1 []*models.User
	err  error
}

// Expect sets up expected params for GrpcClient.GetUsersByIDs
func (mmGetUsersByIDs *mGrpcClientMockGetUsersByIDs) Expect(ctx context.Context, ia1 []int) *mGrpcClientMockGetUsersByIDs {
	if mmGetUsersByIDs.mock.funcGetUsersByIDs != nil {
		mmGetUsersByIDs.mock.t.Fatalf("GrpcClientMock.GetUsersByIDs mock is already set by Set")
	}

	if mmGetUsersByIDs.defaultExpectation == nil {
		mmGetUsersByIDs.defaultExpectation = &GrpcClientMockGetUsersByIDsExpectation{}
	}

	mmGetUsersByIDs.defaultExpectation.params = &GrpcClientMockGetUsersByIDsParams{ctx, ia1}
	for _, e := range mmGetUsersByIDs.expectations {
		if minimock.Equal(e.params, mmGetUsersByIDs.defaultExpectation.params) {
			mmGetUsersByIDs.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetUsersByIDs.defaultExpectation.params)
		}
	}

	return mmGetUsersByIDs
}

// Inspect accepts an inspector function that has same arguments as the GrpcClient.GetUsersByIDs
func (mmGetUsersByIDs *mGrpcClientMockGetUsersByIDs) Inspect(f func(ctx context.Context, ia1 []int)) *mGrpcClientMockGetUsersByIDs {
	if mmGetUsersByIDs.mock.inspectFuncGetUsersByIDs != nil {
		mmGetUsersByIDs.mock.t.Fatalf("Inspect function is already set for GrpcClientMock.GetUsersByIDs")
	}

	mmGetUsersByIDs.mock.inspectFuncGetUsersByIDs = f

	return mmGetUsersByIDs
}

// Return sets up results that will be returned by GrpcClient.GetUsersByIDs
func (mmGetUsersByIDs *mGrpcClientMockGetUsersByIDs) Return(upa1 []*models.User, err error) *GrpcClientMock {
	if mmGetUsersByIDs.mock.funcGetUsersByIDs != nil {
		mmGetUsersByIDs.mock.t.Fatalf("GrpcClientMock.GetUsersByIDs mock is already set by Set")
	}

	if mmGetUsersByIDs.defaultExpectation == nil {
		mmGetUsersByIDs.defaultExpectation = &GrpcClientMockGetUsersByIDsExpectation{mock: mmGetUsersByIDs.mock}
	}
	mmGetUsersByIDs.defaultExpectation.results = &GrpcClientMockGetUsersByIDsResults{upa1, err}
	return mmGetUsersByIDs.mock
}

//Set uses given function f to mock the GrpcClient.GetUsersByIDs method
func (mmGetUsersByIDs *mGrpcClientMockGetUsersByIDs) Set(f func(ctx context.Context, ia1 []int) (upa1 []*models.User, err error)) *GrpcClientMock {
	if mmGetUsersByIDs.defaultExpectation != nil {
		mmGetUsersByIDs.mock.t.Fatalf("Default expectation is already set for the GrpcClient.GetUsersByIDs method")
	}

	if len(mmGetUsersByIDs.expectations) > 0 {
		mmGetUsersByIDs.mock.t.Fatalf("Some expectations are already set for the GrpcClient.GetUsersByIDs method")
	}

	mmGetUsersByIDs.mock.funcGetUsersByIDs = f
	return mmGetUsersByIDs.mock
}

// When sets expectation for the GrpcClient.GetUsersByIDs which will trigger the result defined by the following
// Then helper
func (mmGetUsersByIDs *mGrpcClientMockGetUsersByIDs) When(ctx context.Context, ia1 []int) *GrpcClientMockGetUsersByIDsExpectation {
	if mmGetUsersByIDs.mock.funcGetUsersByIDs != nil {
		mmGetUsersByIDs.mock.t.Fatalf("GrpcClientMock.GetUsersByIDs mock is already set by Set")
	}

	expectation := &GrpcClientMockGetUsersByIDsExpectation{
		mock:   mmGetUsersByIDs.mock,
		params: &GrpcClientMockGetUsersByIDsParams{ctx, ia1},
	}
	mmGetUsersByIDs.expectations = append(mmGetUsersByIDs.expectations, expectation)
	return expectation
}

// Then sets up GrpcClient.GetUsersByIDs return parameters for the expectation previously defined by the When method
func (e *GrpcClientMockGetUsersByIDsExpectation) Then(upa1 []*models.User, err error) *GrpcClientMock {
	e.results = &GrpcClientMockGetUsersByIDsResults{upa1, err}
	return e.mock
}

// GetUsersByIDs implements GrpcClient
func (mmGetUsersByIDs *GrpcClientMock) GetUsersByIDs(ctx context.Context, ia1 []int) (upa1 []*models.User, err error) {
	mm_atomic.AddUint64(&mmGetUsersByIDs.beforeGetUsersByIDsCounter, 1)
	defer mm_atomic.AddUint64(&mmGetUsersByIDs.afterGetUsersByIDsCounter, 1)

	if mmGetUsersByIDs.inspectFuncGetUsersByIDs != nil {
		mmGetUsersByIDs.inspectFuncGetUsersByIDs(ctx, ia1)
	}

	mm_params := &GrpcClientMockGetUsersByIDsParams{ctx, ia1}

	// Record call args
	mmGetUsersByIDs.GetUsersByIDsMock.mutex.Lock()
	mmGetUsersByIDs.GetUsersByIDsMock.callArgs = append(mmGetUsersByIDs.GetUsersByIDsMock.callArgs, mm_params)
	mmGetUsersByIDs.GetUsersByIDsMock.mutex.Unlock()

	for _, e := range mmGetUsersByIDs.GetUsersByIDsMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.upa1, e.results.err
		}
	}

	if mmGetUsersByIDs.GetUsersByIDsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetUsersByIDs.GetUsersByIDsMock.defaultExpectation.Counter, 1)
		mm_want := mmGetUsersByIDs.GetUsersByIDsMock.defaultExpectation.params
		mm_got := GrpcClientMockGetUsersByIDsParams{ctx, ia1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetUsersByIDs.t.Errorf("GrpcClientMock.GetUsersByIDs got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetUsersByIDs.GetUsersByIDsMock.defaultExpectation.results
		if mm_results == nil {
			mmGetUsersByIDs.t.Fatal("No results are set for the GrpcClientMock.GetUsersByIDs")
		}
		return (*mm_results).upa1, (*mm_results).err
	}
	if mmGetUsersByIDs.funcGetUsersByIDs != nil {
		return mmGetUsersByIDs.funcGetUsersByIDs(ctx, ia1)
	}
	mmGetUsersByIDs.t.Fatalf("Unexpected call to GrpcClientMock.GetUsersByIDs. %v %v", ctx, ia1)
	return
}

// GetUsersByIDsAfterCounter returns a count of finished GrpcClientMock.GetUsersByIDs invocations
func (mmGetUsersByIDs *GrpcClientMock) GetUsersByIDsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetUsersByIDs.afterGetUsersByIDsCounter)
}

// GetUsersByIDsBeforeCounter returns a count of GrpcClientMock.GetUsersByIDs invocations
func (mmGetUsersByIDs *GrpcClientMock) GetUsersByIDsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetUsersByIDs.beforeGetUsersByIDsCounter)
}

// Calls returns a list of arguments used in each call to GrpcClientMock.GetUsersByIDs.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetUsersByIDs *mGrpcClientMockGetUsersByIDs) Calls() []*GrpcClientMockGetUsersByIDsParams {
	mmGetUsersByIDs.mutex.RLock()

	argCopy := make([]*GrpcClientMockGetUsersByIDsParams, len(mmGetUsersByIDs.callArgs))
	copy(argCopy, mmGetUsersByIDs.callArgs)

	mmGetUsersByIDs.mutex.RUnlock()

	return argCopy
}

// MinimockGetUsersByIDsDone returns true if the count of the GetUsersByIDs invocations corresponds
// the number of defined expectations
func (m *GrpcClientMock) MinimockGetUsersByIDsDone() bool {
	for _, e := range m.GetUsersByIDsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetUsersByIDsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetUsersByIDsCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetUsersByIDs != nil && mm_atomic.LoadUint64(&m.afterGetUsersByIDsCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetUsersByIDsInspect logs each unmet expectation
func (m *GrpcClientMock) MinimockGetUsersByIDsInspect() {
	for _, e := range m.GetUsersByIDsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to GrpcClientMock.GetUsersByIDs with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetUsersByIDsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetUsersByIDsCounter) < 1 {
		if m.GetUsersByIDsMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to GrpcClientMock.GetUsersByIDs")
		} else {
			m.t.Errorf("Expected call to GrpcClientMock.GetUsersByIDs with params: %#v", *m.GetUsersByIDsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetUsersByIDs != nil && mm_atomic.LoadUint64(&m.afterGetUsersByIDsCounter) < 1 {
		m.t.Error("Expected call to GrpcClientMock.GetUsersByIDs")
	}
}

type mGrpcClientMockReadSubscriber struct {
	mock               *GrpcClientMock
	defaultExpectation *GrpcClientMockReadSubscriberExpectation
	expectations       []*GrpcClientMockReadSubscriberExpectation

	callArgs []*GrpcClientMockReadSubscriberParams
	mutex    sync.RWMutex
}

// GrpcClientMockReadSubscriberExpectation specifies expectation struct of the GrpcClient.ReadSubscriber
type GrpcClientMockReadSubscriberExpectation struct {
	mock    *GrpcClientMock
	params  *GrpcClientMockReadSubscriberParams
	results *GrpcClientMockReadSubscriberResults
	Counter uint64
}

// GrpcClientMockReadSubscriberParams contains parameters of the GrpcClient.ReadSubscriber
type GrpcClientMockReadSubscriberParams struct {
	ctx context.Context
	i1  int
}

// GrpcClientMockReadSubscriberResults contains results of the GrpcClient.ReadSubscriber
type GrpcClientMockReadSubscriberResults struct {
	sp1 *models.Subscriber
	err error
}

// Expect sets up expected params for GrpcClient.ReadSubscriber
func (mmReadSubscriber *mGrpcClientMockReadSubscriber) Expect(ctx context.Context, i1 int) *mGrpcClientMockReadSubscriber {
	if mmReadSubscriber.mock.funcReadSubscriber != nil {
		mmReadSubscriber.mock.t.Fatalf("GrpcClientMock.ReadSubscriber mock is already set by Set")
	}

	if mmReadSubscriber.defaultExpectation == nil {
		mmReadSubscriber.defaultExpectation = &GrpcClientMockReadSubscriberExpectation{}
	}

	mmReadSubscriber.defaultExpectation.params = &GrpcClientMockReadSubscriberParams{ctx, i1}
	for _, e := range mmReadSubscriber.expectations {
		if minimock.Equal(e.params, mmReadSubscriber.defaultExpectation.params) {
			mmReadSubscriber.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmReadSubscriber.defaultExpectation.params)
		}
	}

	return mmReadSubscriber
}

// Inspect accepts an inspector function that has same arguments as the GrpcClient.ReadSubscriber
func (mmReadSubscriber *mGrpcClientMockReadSubscriber) Inspect(f func(ctx context.Context, i1 int)) *mGrpcClientMockReadSubscriber {
	if mmReadSubscriber.mock.inspectFuncReadSubscriber != nil {
		mmReadSubscriber.mock.t.Fatalf("Inspect function is already set for GrpcClientMock.ReadSubscriber")
	}

	mmReadSubscriber.mock.inspectFuncReadSubscriber = f

	return mmReadSubscriber
}

// Return sets up results that will be returned by GrpcClient.ReadSubscriber
func (mmReadSubscriber *mGrpcClientMockReadSubscriber) Return(sp1 *models.Subscriber, err error) *GrpcClientMock {
	if mmReadSubscriber.mock.funcReadSubscriber != nil {
		mmReadSubscriber.mock.t.Fatalf("GrpcClientMock.ReadSubscriber mock is already set by Set")
	}

	if mmReadSubscriber.defaultExpectation == nil {
		mmReadSubscriber.defaultExpectation = &GrpcClientMockReadSubscriberExpectation{mock: mmReadSubscriber.mock}
	}
	mmReadSubscriber.defaultExpectation.results = &GrpcClientMockReadSubscriberResults{sp1, err}
	return mmReadSubscriber.mock
}

//Set uses given function f to mock the GrpcClient.ReadSubscriber method
func (mmReadSubscriber *mGrpcClientMockReadSubscriber) Set(f func(ctx context.Context, i1 int) (sp1 *models.Subscriber, err error)) *GrpcClientMock {
	if mmReadSubscriber.defaultExpectation != nil {
		mmReadSubscriber.mock.t.Fatalf("Default expectation is already set for the GrpcClient.ReadSubscriber method")
	}

	if len(mmReadSubscriber.expectations) > 0 {
		mmReadSubscriber.mock.t.Fatalf("Some expectations are already set for the GrpcClient.ReadSubscriber method")
	}

	mmReadSubscriber.mock.funcReadSubscriber = f
	return mmReadSubscriber.mock
}

// When sets expectation for the GrpcClient.ReadSubscriber which will trigger the result defined by the following
// Then helper
func (mmReadSubscriber *mGrpcClientMockReadSubscriber) When(ctx context.Context, i1 int) *GrpcClientMockReadSubscriberExpectation {
	if mmReadSubscriber.mock.funcReadSubscriber != nil {
		mmReadSubscriber.mock.t.Fatalf("GrpcClientMock.ReadSubscriber mock is already set by Set")
	}

	expectation := &GrpcClientMockReadSubscriberExpectation{
		mock:   mmReadSubscriber.mock,
		params: &GrpcClientMockReadSubscriberParams{ctx, i1},
	}
	mmReadSubscriber.expectations = append(mmReadSubscriber.expectations, expectation)
	return expectation
}

// Then sets up GrpcClient.ReadSubscriber return parameters for the expectation previously defined by the When method
func (e *GrpcClientMockReadSubscriberExpectation) Then(sp1 *models.Subscriber, err error) *GrpcClientMock {
	e.results = &GrpcClientMockReadSubscriberResults{sp1, err}
	return e.mock
}

// ReadSubscriber implements GrpcClient
func (mmReadSubscriber *GrpcClientMock) ReadSubscriber(ctx context.Context, i1 int) (sp1 *models.Subscriber, err error) {
	mm_atomic.AddUint64(&mmReadSubscriber.beforeReadSubscriberCounter, 1)
	defer mm_atomic.AddUint64(&mmReadSubscriber.afterReadSubscriberCounter, 1)

	if mmReadSubscriber.inspectFuncReadSubscriber != nil {
		mmReadSubscriber.inspectFuncReadSubscriber(ctx, i1)
	}

	mm_params := &GrpcClientMockReadSubscriberParams{ctx, i1}

	// Record call args
	mmReadSubscriber.ReadSubscriberMock.mutex.Lock()
	mmReadSubscriber.ReadSubscriberMock.callArgs = append(mmReadSubscriber.ReadSubscriberMock.callArgs, mm_params)
	mmReadSubscriber.ReadSubscriberMock.mutex.Unlock()

	for _, e := range mmReadSubscriber.ReadSubscriberMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.sp1, e.results.err
		}
	}

	if mmReadSubscriber.ReadSubscriberMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmReadSubscriber.ReadSubscriberMock.defaultExpectation.Counter, 1)
		mm_want := mmReadSubscriber.ReadSubscriberMock.defaultExpectation.params
		mm_got := GrpcClientMockReadSubscriberParams{ctx, i1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmReadSubscriber.t.Errorf("GrpcClientMock.ReadSubscriber got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmReadSubscriber.ReadSubscriberMock.defaultExpectation.results
		if mm_results == nil {
			mmReadSubscriber.t.Fatal("No results are set for the GrpcClientMock.ReadSubscriber")
		}
		return (*mm_results).sp1, (*mm_results).err
	}
	if mmReadSubscriber.funcReadSubscriber != nil {
		return mmReadSubscriber.funcReadSubscriber(ctx, i1)
	}
	mmReadSubscriber.t.Fatalf("Unexpected call to GrpcClientMock.ReadSubscriber. %v %v", ctx, i1)
	return
}

// ReadSubscriberAfterCounter returns a count of finished GrpcClientMock.ReadSubscriber invocations
func (mmReadSubscriber *GrpcClientMock) ReadSubscriberAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmReadSubscriber.afterReadSubscriberCounter)
}

// ReadSubscriberBeforeCounter returns a count of GrpcClientMock.ReadSubscriber invocations
func (mmReadSubscriber *GrpcClientMock) ReadSubscriberBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmReadSubscriber.beforeReadSubscriberCounter)
}

// Calls returns a list of arguments used in each call to GrpcClientMock.ReadSubscriber.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmReadSubscriber *mGrpcClientMockReadSubscriber) Calls() []*GrpcClientMockReadSubscriberParams {
	mmReadSubscriber.mutex.RLock()

	argCopy := make([]*GrpcClientMockReadSubscriberParams, len(mmReadSubscriber.callArgs))
	copy(argCopy, mmReadSubscriber.callArgs)

	mmReadSubscriber.mutex.RUnlock()

	return argCopy
}

// MinimockReadSubscriberDone returns true if the count of the ReadSubscriber invocations corresponds
// the number of defined expectations
func (m *GrpcClientMock) MinimockReadSubscriberDone() bool {
	for _, e := range m.ReadSubscriberMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ReadSubscriberMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterReadSubscriberCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcReadSubscriber != nil && mm_atomic.LoadUint64(&m.afterReadSubscriberCounter) < 1 {
		return false
	}
	return true
}

// MinimockReadSubscriberInspect logs each unmet expectation
func (m *GrpcClientMock) MinimockReadSubscriberInspect() {
	for _, e := range m.ReadSubscriberMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to GrpcClientMock.ReadSubscriber with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ReadSubscriberMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterReadSubscriberCounter) < 1 {
		if m.ReadSubscriberMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to GrpcClientMock.ReadSubscriber")
		} else {
			m.t.Errorf("Expected call to GrpcClientMock.ReadSubscriber with params: %#v", *m.ReadSubscriberMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcReadSubscriber != nil && mm_atomic.LoadUint64(&m.afterReadSubscriberCounter) < 1 {
		m.t.Error("Expected call to GrpcClientMock.ReadSubscriber")
	}
}

type mGrpcClientMockReadSubscription struct {
	mock               *GrpcClientMock
	defaultExpectation *GrpcClientMockReadSubscriptionExpectation
	expectations       []*GrpcClientMockReadSubscriptionExpectation

	callArgs []*GrpcClientMockReadSubscriptionParams
	mutex    sync.RWMutex
}

// GrpcClientMockReadSubscriptionExpectation specifies expectation struct of the GrpcClient.ReadSubscription
type GrpcClientMockReadSubscriptionExpectation struct {
	mock    *GrpcClientMock
	params  *GrpcClientMockReadSubscriptionParams
	results *GrpcClientMockReadSubscriptionResults
	Counter uint64
}

// GrpcClientMockReadSubscriptionParams contains parameters of the GrpcClient.ReadSubscription
type GrpcClientMockReadSubscriptionParams struct {
	ctx context.Context
	i1  int
}

// GrpcClientMockReadSubscriptionResults contains results of the GrpcClient.ReadSubscription
type GrpcClientMockReadSubscriptionResults struct {
	sp1 *models.Subscription
	err error
}

// Expect sets up expected params for GrpcClient.ReadSubscription
func (mmReadSubscription *mGrpcClientMockReadSubscription) Expect(ctx context.Context, i1 int) *mGrpcClientMockReadSubscription {
	if mmReadSubscription.mock.funcReadSubscription != nil {
		mmReadSubscription.mock.t.Fatalf("GrpcClientMock.ReadSubscription mock is already set by Set")
	}

	if mmReadSubscription.defaultExpectation == nil {
		mmReadSubscription.defaultExpectation = &GrpcClientMockReadSubscriptionExpectation{}
	}

	mmReadSubscription.defaultExpectation.params = &GrpcClientMockReadSubscriptionParams{ctx, i1}
	for _, e := range mmReadSubscription.expectations {
		if minimock.Equal(e.params, mmReadSubscription.defaultExpectation.params) {
			mmReadSubscription.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmReadSubscription.defaultExpectation.params)
		}
	}

	return mmReadSubscription
}

// Inspect accepts an inspector function that has same arguments as the GrpcClient.ReadSubscription
func (mmReadSubscription *mGrpcClientMockReadSubscription) Inspect(f func(ctx context.Context, i1 int)) *mGrpcClientMockReadSubscription {
	if mmReadSubscription.mock.inspectFuncReadSubscription != nil {
		mmReadSubscription.mock.t.Fatalf("Inspect function is already set for GrpcClientMock.ReadSubscription")
	}

	mmReadSubscription.mock.inspectFuncReadSubscription = f

	return mmReadSubscription
}

// Return sets up results that will be returned by GrpcClient.ReadSubscription
func (mmReadSubscription *mGrpcClientMockReadSubscription) Return(sp1 *models.Subscription, err error) *GrpcClientMock {
	if mmReadSubscription.mock.funcReadSubscription != nil {
		mmReadSubscription.mock.t.Fatalf("GrpcClientMock.ReadSubscription mock is already set by Set")
	}

	if mmReadSubscription.defaultExpectation == nil {
		mmReadSubscription.defaultExpectation = &GrpcClientMockReadSubscriptionExpectation{mock: mmReadSubscription.mock}
	}
	mmReadSubscription.defaultExpectation.results = &GrpcClientMockReadSubscriptionResults{sp1, err}
	return mmReadSubscription.mock
}

//Set uses given function f to mock the GrpcClient.ReadSubscription method
func (mmReadSubscription *mGrpcClientMockReadSubscription) Set(f func(ctx context.Context, i1 int) (sp1 *models.Subscription, err error)) *GrpcClientMock {
	if mmReadSubscription.defaultExpectation != nil {
		mmReadSubscription.mock.t.Fatalf("Default expectation is already set for the GrpcClient.ReadSubscription method")
	}

	if len(mmReadSubscription.expectations) > 0 {
		mmReadSubscription.mock.t.Fatalf("Some expectations are already set for the GrpcClient.ReadSubscription method")
	}

	mmReadSubscription.mock.funcReadSubscription = f
	return mmReadSubscription.mock
}

// When sets expectation for the GrpcClient.ReadSubscription which will trigger the result defined by the following
// Then helper
func (mmReadSubscription *mGrpcClientMockReadSubscription) When(ctx context.Context, i1 int) *GrpcClientMockReadSubscriptionExpectation {
	if mmReadSubscription.mock.funcReadSubscription != nil {
		mmReadSubscription.mock.t.Fatalf("GrpcClientMock.ReadSubscription mock is already set by Set")
	}

	expectation := &GrpcClientMockReadSubscriptionExpectation{
		mock:   mmReadSubscription.mock,
		params: &GrpcClientMockReadSubscriptionParams{ctx, i1},
	}
	mmReadSubscription.expectations = append(mmReadSubscription.expectations, expectation)
	return expectation
}

// Then sets up GrpcClient.ReadSubscription return parameters for the expectation previously defined by the When method
func (e *GrpcClientMockReadSubscriptionExpectation) Then(sp1 *models.Subscription, err error) *GrpcClientMock {
	e.results = &GrpcClientMockReadSubscriptionResults{sp1, err}
	return e.mock
}

// ReadSubscription implements GrpcClient
func (mmReadSubscription *GrpcClientMock) ReadSubscription(ctx context.Context, i1 int) (sp1 *models.Subscription, err error) {
	mm_atomic.AddUint64(&mmReadSubscription.beforeReadSubscriptionCounter, 1)
	defer mm_atomic.AddUint64(&mmReadSubscription.afterReadSubscriptionCounter, 1)

	if mmReadSubscription.inspectFuncReadSubscription != nil {
		mmReadSubscription.inspectFuncReadSubscription(ctx, i1)
	}

	mm_params := &GrpcClientMockReadSubscriptionParams{ctx, i1}

	// Record call args
	mmReadSubscription.ReadSubscriptionMock.mutex.Lock()
	mmReadSubscription.ReadSubscriptionMock.callArgs = append(mmReadSubscription.ReadSubscriptionMock.callArgs, mm_params)
	mmReadSubscription.ReadSubscriptionMock.mutex.Unlock()

	for _, e := range mmReadSubscription.ReadSubscriptionMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.sp1, e.results.err
		}
	}

	if mmReadSubscription.ReadSubscriptionMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmReadSubscription.ReadSubscriptionMock.defaultExpectation.Counter, 1)
		mm_want := mmReadSubscription.ReadSubscriptionMock.defaultExpectation.params
		mm_got := GrpcClientMockReadSubscriptionParams{ctx, i1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmReadSubscription.t.Errorf("GrpcClientMock.ReadSubscription got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmReadSubscription.ReadSubscriptionMock.defaultExpectation.results
		if mm_results == nil {
			mmReadSubscription.t.Fatal("No results are set for the GrpcClientMock.ReadSubscription")
		}
		return (*mm_results).sp1, (*mm_results).err
	}
	if mmReadSubscription.funcReadSubscription != nil {
		return mmReadSubscription.funcReadSubscription(ctx, i1)
	}
	mmReadSubscription.t.Fatalf("Unexpected call to GrpcClientMock.ReadSubscription. %v %v", ctx, i1)
	return
}

// ReadSubscriptionAfterCounter returns a count of finished GrpcClientMock.ReadSubscription invocations
func (mmReadSubscription *GrpcClientMock) ReadSubscriptionAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmReadSubscription.afterReadSubscriptionCounter)
}

// ReadSubscriptionBeforeCounter returns a count of GrpcClientMock.ReadSubscription invocations
func (mmReadSubscription *GrpcClientMock) ReadSubscriptionBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmReadSubscription.beforeReadSubscriptionCounter)
}

// Calls returns a list of arguments used in each call to GrpcClientMock.ReadSubscription.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmReadSubscription *mGrpcClientMockReadSubscription) Calls() []*GrpcClientMockReadSubscriptionParams {
	mmReadSubscription.mutex.RLock()

	argCopy := make([]*GrpcClientMockReadSubscriptionParams, len(mmReadSubscription.callArgs))
	copy(argCopy, mmReadSubscription.callArgs)

	mmReadSubscription.mutex.RUnlock()

	return argCopy
}

// MinimockReadSubscriptionDone returns true if the count of the ReadSubscription invocations corresponds
// the number of defined expectations
func (m *GrpcClientMock) MinimockReadSubscriptionDone() bool {
	for _, e := range m.ReadSubscriptionMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ReadSubscriptionMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterReadSubscriptionCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcReadSubscription != nil && mm_atomic.LoadUint64(&m.afterReadSubscriptionCounter) < 1 {
		return false
	}
	return true
}

// MinimockReadSubscriptionInspect logs each unmet expectation
func (m *GrpcClientMock) MinimockReadSubscriptionInspect() {
	for _, e := range m.ReadSubscriptionMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to GrpcClientMock.ReadSubscription with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ReadSubscriptionMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterReadSubscriptionCounter) < 1 {
		if m.ReadSubscriptionMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to GrpcClientMock.ReadSubscription")
		} else {
			m.t.Errorf("Expected call to GrpcClientMock.ReadSubscription with params: %#v", *m.ReadSubscriptionMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcReadSubscription != nil && mm_atomic.LoadUint64(&m.afterReadSubscriptionCounter) < 1 {
		m.t.Error("Expected call to GrpcClientMock.ReadSubscription")
	}
}

type mGrpcClientMockReadUser struct {
	mock               *GrpcClientMock
	defaultExpectation *GrpcClientMockReadUserExpectation
	expectations       []*GrpcClientMockReadUserExpectation

	callArgs []*GrpcClientMockReadUserParams
	mutex    sync.RWMutex
}

// GrpcClientMockReadUserExpectation specifies expectation struct of the GrpcClient.ReadUser
type GrpcClientMockReadUserExpectation struct {
	mock    *GrpcClientMock
	params  *GrpcClientMockReadUserParams
	results *GrpcClientMockReadUserResults
	Counter uint64
}

// GrpcClientMockReadUserParams contains parameters of the GrpcClient.ReadUser
type GrpcClientMockReadUserParams struct {
	ctx context.Context
	i1  int
}

// GrpcClientMockReadUserResults contains results of the GrpcClient.ReadUser
type GrpcClientMockReadUserResults struct {
	up1 *models.User
	err error
}

// Expect sets up expected params for GrpcClient.ReadUser
func (mmReadUser *mGrpcClientMockReadUser) Expect(ctx context.Context, i1 int) *mGrpcClientMockReadUser {
	if mmReadUser.mock.funcReadUser != nil {
		mmReadUser.mock.t.Fatalf("GrpcClientMock.ReadUser mock is already set by Set")
	}

	if mmReadUser.defaultExpectation == nil {
		mmReadUser.defaultExpectation = &GrpcClientMockReadUserExpectation{}
	}

	mmReadUser.defaultExpectation.params = &GrpcClientMockReadUserParams{ctx, i1}
	for _, e := range mmReadUser.expectations {
		if minimock.Equal(e.params, mmReadUser.defaultExpectation.params) {
			mmReadUser.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmReadUser.defaultExpectation.params)
		}
	}

	return mmReadUser
}

// Inspect accepts an inspector function that has same arguments as the GrpcClient.ReadUser
func (mmReadUser *mGrpcClientMockReadUser) Inspect(f func(ctx context.Context, i1 int)) *mGrpcClientMockReadUser {
	if mmReadUser.mock.inspectFuncReadUser != nil {
		mmReadUser.mock.t.Fatalf("Inspect function is already set for GrpcClientMock.ReadUser")
	}

	mmReadUser.mock.inspectFuncReadUser = f

	return mmReadUser
}

// Return sets up results that will be returned by GrpcClient.ReadUser
func (mmReadUser *mGrpcClientMockReadUser) Return(up1 *models.User, err error) *GrpcClientMock {
	if mmReadUser.mock.funcReadUser != nil {
		mmReadUser.mock.t.Fatalf("GrpcClientMock.ReadUser mock is already set by Set")
	}

	if mmReadUser.defaultExpectation == nil {
		mmReadUser.defaultExpectation = &GrpcClientMockReadUserExpectation{mock: mmReadUser.mock}
	}
	mmReadUser.defaultExpectation.results = &GrpcClientMockReadUserResults{up1, err}
	return mmReadUser.mock
}

//Set uses given function f to mock the GrpcClient.ReadUser method
func (mmReadUser *mGrpcClientMockReadUser) Set(f func(ctx context.Context, i1 int) (up1 *models.User, err error)) *GrpcClientMock {
	if mmReadUser.defaultExpectation != nil {
		mmReadUser.mock.t.Fatalf("Default expectation is already set for the GrpcClient.ReadUser method")
	}

	if len(mmReadUser.expectations) > 0 {
		mmReadUser.mock.t.Fatalf("Some expectations are already set for the GrpcClient.ReadUser method")
	}

	mmReadUser.mock.funcReadUser = f
	return mmReadUser.mock
}

// When sets expectation for the GrpcClient.ReadUser which will trigger the result defined by the following
// Then helper
func (mmReadUser *mGrpcClientMockReadUser) When(ctx context.Context, i1 int) *GrpcClientMockReadUserExpectation {
	if mmReadUser.mock.funcReadUser != nil {
		mmReadUser.mock.t.Fatalf("GrpcClientMock.ReadUser mock is already set by Set")
	}

	expectation := &GrpcClientMockReadUserExpectation{
		mock:   mmReadUser.mock,
		params: &GrpcClientMockReadUserParams{ctx, i1},
	}
	mmReadUser.expectations = append(mmReadUser.expectations, expectation)
	return expectation
}

// Then sets up GrpcClient.ReadUser return parameters for the expectation previously defined by the When method
func (e *GrpcClientMockReadUserExpectation) Then(up1 *models.User, err error) *GrpcClientMock {
	e.results = &GrpcClientMockReadUserResults{up1, err}
	return e.mock
}

// ReadUser implements GrpcClient
func (mmReadUser *GrpcClientMock) ReadUser(ctx context.Context, i1 int) (up1 *models.User, err error) {
	mm_atomic.AddUint64(&mmReadUser.beforeReadUserCounter, 1)
	defer mm_atomic.AddUint64(&mmReadUser.afterReadUserCounter, 1)

	if mmReadUser.inspectFuncReadUser != nil {
		mmReadUser.inspectFuncReadUser(ctx, i1)
	}

	mm_params := &GrpcClientMockReadUserParams{ctx, i1}

	// Record call args
	mmReadUser.ReadUserMock.mutex.Lock()
	mmReadUser.ReadUserMock.callArgs = append(mmReadUser.ReadUserMock.callArgs, mm_params)
	mmReadUser.ReadUserMock.mutex.Unlock()

	for _, e := range mmReadUser.ReadUserMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.up1, e.results.err
		}
	}

	if mmReadUser.ReadUserMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmReadUser.ReadUserMock.defaultExpectation.Counter, 1)
		mm_want := mmReadUser.ReadUserMock.defaultExpectation.params
		mm_got := GrpcClientMockReadUserParams{ctx, i1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmReadUser.t.Errorf("GrpcClientMock.ReadUser got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmReadUser.ReadUserMock.defaultExpectation.results
		if mm_results == nil {
			mmReadUser.t.Fatal("No results are set for the GrpcClientMock.ReadUser")
		}
		return (*mm_results).up1, (*mm_results).err
	}
	if mmReadUser.funcReadUser != nil {
		return mmReadUser.funcReadUser(ctx, i1)
	}
	mmReadUser.t.Fatalf("Unexpected call to GrpcClientMock.ReadUser. %v %v", ctx, i1)
	return
}

// ReadUserAfterCounter returns a count of finished GrpcClientMock.ReadUser invocations
func (mmReadUser *GrpcClientMock) ReadUserAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmReadUser.afterReadUserCounter)
}

// ReadUserBeforeCounter returns a count of GrpcClientMock.ReadUser invocations
func (mmReadUser *GrpcClientMock) ReadUserBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmReadUser.beforeReadUserCounter)
}

// Calls returns a list of arguments used in each call to GrpcClientMock.ReadUser.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmReadUser *mGrpcClientMockReadUser) Calls() []*GrpcClientMockReadUserParams {
	mmReadUser.mutex.RLock()

	argCopy := make([]*GrpcClientMockReadUserParams, len(mmReadUser.callArgs))
	copy(argCopy, mmReadUser.callArgs)

	mmReadUser.mutex.RUnlock()

	return argCopy
}

// MinimockReadUserDone returns true if the count of the ReadUser invocations corresponds
// the number of defined expectations
func (m *GrpcClientMock) MinimockReadUserDone() bool {
	for _, e := range m.ReadUserMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ReadUserMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterReadUserCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcReadUser != nil && mm_atomic.LoadUint64(&m.afterReadUserCounter) < 1 {
		return false
	}
	return true
}

// MinimockReadUserInspect logs each unmet expectation
func (m *GrpcClientMock) MinimockReadUserInspect() {
	for _, e := range m.ReadUserMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to GrpcClientMock.ReadUser with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ReadUserMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterReadUserCounter) < 1 {
		if m.ReadUserMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to GrpcClientMock.ReadUser")
		} else {
			m.t.Errorf("Expected call to GrpcClientMock.ReadUser with params: %#v", *m.ReadUserMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcReadUser != nil && mm_atomic.LoadUint64(&m.afterReadUserCounter) < 1 {
		m.t.Error("Expected call to GrpcClientMock.ReadUser")
	}
}

type mGrpcClientMockUpdateSubscriber struct {
	mock               *GrpcClientMock
	defaultExpectation *GrpcClientMockUpdateSubscriberExpectation
	expectations       []*GrpcClientMockUpdateSubscriberExpectation

	callArgs []*GrpcClientMockUpdateSubscriberParams
	mutex    sync.RWMutex
}

// GrpcClientMockUpdateSubscriberExpectation specifies expectation struct of the GrpcClient.UpdateSubscriber
type GrpcClientMockUpdateSubscriberExpectation struct {
	mock    *GrpcClientMock
	params  *GrpcClientMockUpdateSubscriberParams
	results *GrpcClientMockUpdateSubscriberResults
	Counter uint64
}

// GrpcClientMockUpdateSubscriberParams contains parameters of the GrpcClient.UpdateSubscriber
type GrpcClientMockUpdateSubscriberParams struct {
	ctx context.Context
	sp1 *models.Subscriber
}

// GrpcClientMockUpdateSubscriberResults contains results of the GrpcClient.UpdateSubscriber
type GrpcClientMockUpdateSubscriberResults struct {
	b1  bool
	err error
}

// Expect sets up expected params for GrpcClient.UpdateSubscriber
func (mmUpdateSubscriber *mGrpcClientMockUpdateSubscriber) Expect(ctx context.Context, sp1 *models.Subscriber) *mGrpcClientMockUpdateSubscriber {
	if mmUpdateSubscriber.mock.funcUpdateSubscriber != nil {
		mmUpdateSubscriber.mock.t.Fatalf("GrpcClientMock.UpdateSubscriber mock is already set by Set")
	}

	if mmUpdateSubscriber.defaultExpectation == nil {
		mmUpdateSubscriber.defaultExpectation = &GrpcClientMockUpdateSubscriberExpectation{}
	}

	mmUpdateSubscriber.defaultExpectation.params = &GrpcClientMockUpdateSubscriberParams{ctx, sp1}
	for _, e := range mmUpdateSubscriber.expectations {
		if minimock.Equal(e.params, mmUpdateSubscriber.defaultExpectation.params) {
			mmUpdateSubscriber.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpdateSubscriber.defaultExpectation.params)
		}
	}

	return mmUpdateSubscriber
}

// Inspect accepts an inspector function that has same arguments as the GrpcClient.UpdateSubscriber
func (mmUpdateSubscriber *mGrpcClientMockUpdateSubscriber) Inspect(f func(ctx context.Context, sp1 *models.Subscriber)) *mGrpcClientMockUpdateSubscriber {
	if mmUpdateSubscriber.mock.inspectFuncUpdateSubscriber != nil {
		mmUpdateSubscriber.mock.t.Fatalf("Inspect function is already set for GrpcClientMock.UpdateSubscriber")
	}

	mmUpdateSubscriber.mock.inspectFuncUpdateSubscriber = f

	return mmUpdateSubscriber
}

// Return sets up results that will be returned by GrpcClient.UpdateSubscriber
func (mmUpdateSubscriber *mGrpcClientMockUpdateSubscriber) Return(b1 bool, err error) *GrpcClientMock {
	if mmUpdateSubscriber.mock.funcUpdateSubscriber != nil {
		mmUpdateSubscriber.mock.t.Fatalf("GrpcClientMock.UpdateSubscriber mock is already set by Set")
	}

	if mmUpdateSubscriber.defaultExpectation == nil {
		mmUpdateSubscriber.defaultExpectation = &GrpcClientMockUpdateSubscriberExpectation{mock: mmUpdateSubscriber.mock}
	}
	mmUpdateSubscriber.defaultExpectation.results = &GrpcClientMockUpdateSubscriberResults{b1, err}
	return mmUpdateSubscriber.mock
}

//Set uses given function f to mock the GrpcClient.UpdateSubscriber method
func (mmUpdateSubscriber *mGrpcClientMockUpdateSubscriber) Set(f func(ctx context.Context, sp1 *models.Subscriber) (b1 bool, err error)) *GrpcClientMock {
	if mmUpdateSubscriber.defaultExpectation != nil {
		mmUpdateSubscriber.mock.t.Fatalf("Default expectation is already set for the GrpcClient.UpdateSubscriber method")
	}

	if len(mmUpdateSubscriber.expectations) > 0 {
		mmUpdateSubscriber.mock.t.Fatalf("Some expectations are already set for the GrpcClient.UpdateSubscriber method")
	}

	mmUpdateSubscriber.mock.funcUpdateSubscriber = f
	return mmUpdateSubscriber.mock
}

// When sets expectation for the GrpcClient.UpdateSubscriber which will trigger the result defined by the following
// Then helper
func (mmUpdateSubscriber *mGrpcClientMockUpdateSubscriber) When(ctx context.Context, sp1 *models.Subscriber) *GrpcClientMockUpdateSubscriberExpectation {
	if mmUpdateSubscriber.mock.funcUpdateSubscriber != nil {
		mmUpdateSubscriber.mock.t.Fatalf("GrpcClientMock.UpdateSubscriber mock is already set by Set")
	}

	expectation := &GrpcClientMockUpdateSubscriberExpectation{
		mock:   mmUpdateSubscriber.mock,
		params: &GrpcClientMockUpdateSubscriberParams{ctx, sp1},
	}
	mmUpdateSubscriber.expectations = append(mmUpdateSubscriber.expectations, expectation)
	return expectation
}

// Then sets up GrpcClient.UpdateSubscriber return parameters for the expectation previously defined by the When method
func (e *GrpcClientMockUpdateSubscriberExpectation) Then(b1 bool, err error) *GrpcClientMock {
	e.results = &GrpcClientMockUpdateSubscriberResults{b1, err}
	return e.mock
}

// UpdateSubscriber implements GrpcClient
func (mmUpdateSubscriber *GrpcClientMock) UpdateSubscriber(ctx context.Context, sp1 *models.Subscriber) (b1 bool, err error) {
	mm_atomic.AddUint64(&mmUpdateSubscriber.beforeUpdateSubscriberCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdateSubscriber.afterUpdateSubscriberCounter, 1)

	if mmUpdateSubscriber.inspectFuncUpdateSubscriber != nil {
		mmUpdateSubscriber.inspectFuncUpdateSubscriber(ctx, sp1)
	}

	mm_params := &GrpcClientMockUpdateSubscriberParams{ctx, sp1}

	// Record call args
	mmUpdateSubscriber.UpdateSubscriberMock.mutex.Lock()
	mmUpdateSubscriber.UpdateSubscriberMock.callArgs = append(mmUpdateSubscriber.UpdateSubscriberMock.callArgs, mm_params)
	mmUpdateSubscriber.UpdateSubscriberMock.mutex.Unlock()

	for _, e := range mmUpdateSubscriber.UpdateSubscriberMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.b1, e.results.err
		}
	}

	if mmUpdateSubscriber.UpdateSubscriberMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdateSubscriber.UpdateSubscriberMock.defaultExpectation.Counter, 1)
		mm_want := mmUpdateSubscriber.UpdateSubscriberMock.defaultExpectation.params
		mm_got := GrpcClientMockUpdateSubscriberParams{ctx, sp1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUpdateSubscriber.t.Errorf("GrpcClientMock.UpdateSubscriber got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUpdateSubscriber.UpdateSubscriberMock.defaultExpectation.results
		if mm_results == nil {
			mmUpdateSubscriber.t.Fatal("No results are set for the GrpcClientMock.UpdateSubscriber")
		}
		return (*mm_results).b1, (*mm_results).err
	}
	if mmUpdateSubscriber.funcUpdateSubscriber != nil {
		return mmUpdateSubscriber.funcUpdateSubscriber(ctx, sp1)
	}
	mmUpdateSubscriber.t.Fatalf("Unexpected call to GrpcClientMock.UpdateSubscriber. %v %v", ctx, sp1)
	return
}

// UpdateSubscriberAfterCounter returns a count of finished GrpcClientMock.UpdateSubscriber invocations
func (mmUpdateSubscriber *GrpcClientMock) UpdateSubscriberAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateSubscriber.afterUpdateSubscriberCounter)
}

// UpdateSubscriberBeforeCounter returns a count of GrpcClientMock.UpdateSubscriber invocations
func (mmUpdateSubscriber *GrpcClientMock) UpdateSubscriberBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateSubscriber.beforeUpdateSubscriberCounter)
}

// Calls returns a list of arguments used in each call to GrpcClientMock.UpdateSubscriber.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpdateSubscriber *mGrpcClientMockUpdateSubscriber) Calls() []*GrpcClientMockUpdateSubscriberParams {
	mmUpdateSubscriber.mutex.RLock()

	argCopy := make([]*GrpcClientMockUpdateSubscriberParams, len(mmUpdateSubscriber.callArgs))
	copy(argCopy, mmUpdateSubscriber.callArgs)

	mmUpdateSubscriber.mutex.RUnlock()

	return argCopy
}

// MinimockUpdateSubscriberDone returns true if the count of the UpdateSubscriber invocations corresponds
// the number of defined expectations
func (m *GrpcClientMock) MinimockUpdateSubscriberDone() bool {
	for _, e := range m.UpdateSubscriberMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateSubscriberMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateSubscriberCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdateSubscriber != nil && mm_atomic.LoadUint64(&m.afterUpdateSubscriberCounter) < 1 {
		return false
	}
	return true
}

// MinimockUpdateSubscriberInspect logs each unmet expectation
func (m *GrpcClientMock) MinimockUpdateSubscriberInspect() {
	for _, e := range m.UpdateSubscriberMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to GrpcClientMock.UpdateSubscriber with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateSubscriberMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateSubscriberCounter) < 1 {
		if m.UpdateSubscriberMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to GrpcClientMock.UpdateSubscriber")
		} else {
			m.t.Errorf("Expected call to GrpcClientMock.UpdateSubscriber with params: %#v", *m.UpdateSubscriberMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdateSubscriber != nil && mm_atomic.LoadUint64(&m.afterUpdateSubscriberCounter) < 1 {
		m.t.Error("Expected call to GrpcClientMock.UpdateSubscriber")
	}
}

type mGrpcClientMockUpdateSubscription struct {
	mock               *GrpcClientMock
	defaultExpectation *GrpcClientMockUpdateSubscriptionExpectation
	expectations       []*GrpcClientMockUpdateSubscriptionExpectation

	callArgs []*GrpcClientMockUpdateSubscriptionParams
	mutex    sync.RWMutex
}

// GrpcClientMockUpdateSubscriptionExpectation specifies expectation struct of the GrpcClient.UpdateSubscription
type GrpcClientMockUpdateSubscriptionExpectation struct {
	mock    *GrpcClientMock
	params  *GrpcClientMockUpdateSubscriptionParams
	results *GrpcClientMockUpdateSubscriptionResults
	Counter uint64
}

// GrpcClientMockUpdateSubscriptionParams contains parameters of the GrpcClient.UpdateSubscription
type GrpcClientMockUpdateSubscriptionParams struct {
	ctx context.Context
	sp1 *models.Subscription
}

// GrpcClientMockUpdateSubscriptionResults contains results of the GrpcClient.UpdateSubscription
type GrpcClientMockUpdateSubscriptionResults struct {
	b1  bool
	err error
}

// Expect sets up expected params for GrpcClient.UpdateSubscription
func (mmUpdateSubscription *mGrpcClientMockUpdateSubscription) Expect(ctx context.Context, sp1 *models.Subscription) *mGrpcClientMockUpdateSubscription {
	if mmUpdateSubscription.mock.funcUpdateSubscription != nil {
		mmUpdateSubscription.mock.t.Fatalf("GrpcClientMock.UpdateSubscription mock is already set by Set")
	}

	if mmUpdateSubscription.defaultExpectation == nil {
		mmUpdateSubscription.defaultExpectation = &GrpcClientMockUpdateSubscriptionExpectation{}
	}

	mmUpdateSubscription.defaultExpectation.params = &GrpcClientMockUpdateSubscriptionParams{ctx, sp1}
	for _, e := range mmUpdateSubscription.expectations {
		if minimock.Equal(e.params, mmUpdateSubscription.defaultExpectation.params) {
			mmUpdateSubscription.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpdateSubscription.defaultExpectation.params)
		}
	}

	return mmUpdateSubscription
}

// Inspect accepts an inspector function that has same arguments as the GrpcClient.UpdateSubscription
func (mmUpdateSubscription *mGrpcClientMockUpdateSubscription) Inspect(f func(ctx context.Context, sp1 *models.Subscription)) *mGrpcClientMockUpdateSubscription {
	if mmUpdateSubscription.mock.inspectFuncUpdateSubscription != nil {
		mmUpdateSubscription.mock.t.Fatalf("Inspect function is already set for GrpcClientMock.UpdateSubscription")
	}

	mmUpdateSubscription.mock.inspectFuncUpdateSubscription = f

	return mmUpdateSubscription
}

// Return sets up results that will be returned by GrpcClient.UpdateSubscription
func (mmUpdateSubscription *mGrpcClientMockUpdateSubscription) Return(b1 bool, err error) *GrpcClientMock {
	if mmUpdateSubscription.mock.funcUpdateSubscription != nil {
		mmUpdateSubscription.mock.t.Fatalf("GrpcClientMock.UpdateSubscription mock is already set by Set")
	}

	if mmUpdateSubscription.defaultExpectation == nil {
		mmUpdateSubscription.defaultExpectation = &GrpcClientMockUpdateSubscriptionExpectation{mock: mmUpdateSubscription.mock}
	}
	mmUpdateSubscription.defaultExpectation.results = &GrpcClientMockUpdateSubscriptionResults{b1, err}
	return mmUpdateSubscription.mock
}

//Set uses given function f to mock the GrpcClient.UpdateSubscription method
func (mmUpdateSubscription *mGrpcClientMockUpdateSubscription) Set(f func(ctx context.Context, sp1 *models.Subscription) (b1 bool, err error)) *GrpcClientMock {
	if mmUpdateSubscription.defaultExpectation != nil {
		mmUpdateSubscription.mock.t.Fatalf("Default expectation is already set for the GrpcClient.UpdateSubscription method")
	}

	if len(mmUpdateSubscription.expectations) > 0 {
		mmUpdateSubscription.mock.t.Fatalf("Some expectations are already set for the GrpcClient.UpdateSubscription method")
	}

	mmUpdateSubscription.mock.funcUpdateSubscription = f
	return mmUpdateSubscription.mock
}

// When sets expectation for the GrpcClient.UpdateSubscription which will trigger the result defined by the following
// Then helper
func (mmUpdateSubscription *mGrpcClientMockUpdateSubscription) When(ctx context.Context, sp1 *models.Subscription) *GrpcClientMockUpdateSubscriptionExpectation {
	if mmUpdateSubscription.mock.funcUpdateSubscription != nil {
		mmUpdateSubscription.mock.t.Fatalf("GrpcClientMock.UpdateSubscription mock is already set by Set")
	}

	expectation := &GrpcClientMockUpdateSubscriptionExpectation{
		mock:   mmUpdateSubscription.mock,
		params: &GrpcClientMockUpdateSubscriptionParams{ctx, sp1},
	}
	mmUpdateSubscription.expectations = append(mmUpdateSubscription.expectations, expectation)
	return expectation
}

// Then sets up GrpcClient.UpdateSubscription return parameters for the expectation previously defined by the When method
func (e *GrpcClientMockUpdateSubscriptionExpectation) Then(b1 bool, err error) *GrpcClientMock {
	e.results = &GrpcClientMockUpdateSubscriptionResults{b1, err}
	return e.mock
}

// UpdateSubscription implements GrpcClient
func (mmUpdateSubscription *GrpcClientMock) UpdateSubscription(ctx context.Context, sp1 *models.Subscription) (b1 bool, err error) {
	mm_atomic.AddUint64(&mmUpdateSubscription.beforeUpdateSubscriptionCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdateSubscription.afterUpdateSubscriptionCounter, 1)

	if mmUpdateSubscription.inspectFuncUpdateSubscription != nil {
		mmUpdateSubscription.inspectFuncUpdateSubscription(ctx, sp1)
	}

	mm_params := &GrpcClientMockUpdateSubscriptionParams{ctx, sp1}

	// Record call args
	mmUpdateSubscription.UpdateSubscriptionMock.mutex.Lock()
	mmUpdateSubscription.UpdateSubscriptionMock.callArgs = append(mmUpdateSubscription.UpdateSubscriptionMock.callArgs, mm_params)
	mmUpdateSubscription.UpdateSubscriptionMock.mutex.Unlock()

	for _, e := range mmUpdateSubscription.UpdateSubscriptionMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.b1, e.results.err
		}
	}

	if mmUpdateSubscription.UpdateSubscriptionMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdateSubscription.UpdateSubscriptionMock.defaultExpectation.Counter, 1)
		mm_want := mmUpdateSubscription.UpdateSubscriptionMock.defaultExpectation.params
		mm_got := GrpcClientMockUpdateSubscriptionParams{ctx, sp1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUpdateSubscription.t.Errorf("GrpcClientMock.UpdateSubscription got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUpdateSubscription.UpdateSubscriptionMock.defaultExpectation.results
		if mm_results == nil {
			mmUpdateSubscription.t.Fatal("No results are set for the GrpcClientMock.UpdateSubscription")
		}
		return (*mm_results).b1, (*mm_results).err
	}
	if mmUpdateSubscription.funcUpdateSubscription != nil {
		return mmUpdateSubscription.funcUpdateSubscription(ctx, sp1)
	}
	mmUpdateSubscription.t.Fatalf("Unexpected call to GrpcClientMock.UpdateSubscription. %v %v", ctx, sp1)
	return
}

// UpdateSubscriptionAfterCounter returns a count of finished GrpcClientMock.UpdateSubscription invocations
func (mmUpdateSubscription *GrpcClientMock) UpdateSubscriptionAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateSubscription.afterUpdateSubscriptionCounter)
}

// UpdateSubscriptionBeforeCounter returns a count of GrpcClientMock.UpdateSubscription invocations
func (mmUpdateSubscription *GrpcClientMock) UpdateSubscriptionBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateSubscription.beforeUpdateSubscriptionCounter)
}

// Calls returns a list of arguments used in each call to GrpcClientMock.UpdateSubscription.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpdateSubscription *mGrpcClientMockUpdateSubscription) Calls() []*GrpcClientMockUpdateSubscriptionParams {
	mmUpdateSubscription.mutex.RLock()

	argCopy := make([]*GrpcClientMockUpdateSubscriptionParams, len(mmUpdateSubscription.callArgs))
	copy(argCopy, mmUpdateSubscription.callArgs)

	mmUpdateSubscription.mutex.RUnlock()

	return argCopy
}

// MinimockUpdateSubscriptionDone returns true if the count of the UpdateSubscription invocations corresponds
// the number of defined expectations
func (m *GrpcClientMock) MinimockUpdateSubscriptionDone() bool {
	for _, e := range m.UpdateSubscriptionMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateSubscriptionMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateSubscriptionCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdateSubscription != nil && mm_atomic.LoadUint64(&m.afterUpdateSubscriptionCounter) < 1 {
		return false
	}
	return true
}

// MinimockUpdateSubscriptionInspect logs each unmet expectation
func (m *GrpcClientMock) MinimockUpdateSubscriptionInspect() {
	for _, e := range m.UpdateSubscriptionMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to GrpcClientMock.UpdateSubscription with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateSubscriptionMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateSubscriptionCounter) < 1 {
		if m.UpdateSubscriptionMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to GrpcClientMock.UpdateSubscription")
		} else {
			m.t.Errorf("Expected call to GrpcClientMock.UpdateSubscription with params: %#v", *m.UpdateSubscriptionMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdateSubscription != nil && mm_atomic.LoadUint64(&m.afterUpdateSubscriptionCounter) < 1 {
		m.t.Error("Expected call to GrpcClientMock.UpdateSubscription")
	}
}

type mGrpcClientMockUpdateUser struct {
	mock               *GrpcClientMock
	defaultExpectation *GrpcClientMockUpdateUserExpectation
	expectations       []*GrpcClientMockUpdateUserExpectation

	callArgs []*GrpcClientMockUpdateUserParams
	mutex    sync.RWMutex
}

// GrpcClientMockUpdateUserExpectation specifies expectation struct of the GrpcClient.UpdateUser
type GrpcClientMockUpdateUserExpectation struct {
	mock    *GrpcClientMock
	params  *GrpcClientMockUpdateUserParams
	results *GrpcClientMockUpdateUserResults
	Counter uint64
}

// GrpcClientMockUpdateUserParams contains parameters of the GrpcClient.UpdateUser
type GrpcClientMockUpdateUserParams struct {
	ctx context.Context
	up1 *models.User
}

// GrpcClientMockUpdateUserResults contains results of the GrpcClient.UpdateUser
type GrpcClientMockUpdateUserResults struct {
	b1  bool
	err error
}

// Expect sets up expected params for GrpcClient.UpdateUser
func (mmUpdateUser *mGrpcClientMockUpdateUser) Expect(ctx context.Context, up1 *models.User) *mGrpcClientMockUpdateUser {
	if mmUpdateUser.mock.funcUpdateUser != nil {
		mmUpdateUser.mock.t.Fatalf("GrpcClientMock.UpdateUser mock is already set by Set")
	}

	if mmUpdateUser.defaultExpectation == nil {
		mmUpdateUser.defaultExpectation = &GrpcClientMockUpdateUserExpectation{}
	}

	mmUpdateUser.defaultExpectation.params = &GrpcClientMockUpdateUserParams{ctx, up1}
	for _, e := range mmUpdateUser.expectations {
		if minimock.Equal(e.params, mmUpdateUser.defaultExpectation.params) {
			mmUpdateUser.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpdateUser.defaultExpectation.params)
		}
	}

	return mmUpdateUser
}

// Inspect accepts an inspector function that has same arguments as the GrpcClient.UpdateUser
func (mmUpdateUser *mGrpcClientMockUpdateUser) Inspect(f func(ctx context.Context, up1 *models.User)) *mGrpcClientMockUpdateUser {
	if mmUpdateUser.mock.inspectFuncUpdateUser != nil {
		mmUpdateUser.mock.t.Fatalf("Inspect function is already set for GrpcClientMock.UpdateUser")
	}

	mmUpdateUser.mock.inspectFuncUpdateUser = f

	return mmUpdateUser
}

// Return sets up results that will be returned by GrpcClient.UpdateUser
func (mmUpdateUser *mGrpcClientMockUpdateUser) Return(b1 bool, err error) *GrpcClientMock {
	if mmUpdateUser.mock.funcUpdateUser != nil {
		mmUpdateUser.mock.t.Fatalf("GrpcClientMock.UpdateUser mock is already set by Set")
	}

	if mmUpdateUser.defaultExpectation == nil {
		mmUpdateUser.defaultExpectation = &GrpcClientMockUpdateUserExpectation{mock: mmUpdateUser.mock}
	}
	mmUpdateUser.defaultExpectation.results = &GrpcClientMockUpdateUserResults{b1, err}
	return mmUpdateUser.mock
}

//Set uses given function f to mock the GrpcClient.UpdateUser method
func (mmUpdateUser *mGrpcClientMockUpdateUser) Set(f func(ctx context.Context, up1 *models.User) (b1 bool, err error)) *GrpcClientMock {
	if mmUpdateUser.defaultExpectation != nil {
		mmUpdateUser.mock.t.Fatalf("Default expectation is already set for the GrpcClient.UpdateUser method")
	}

	if len(mmUpdateUser.expectations) > 0 {
		mmUpdateUser.mock.t.Fatalf("Some expectations are already set for the GrpcClient.UpdateUser method")
	}

	mmUpdateUser.mock.funcUpdateUser = f
	return mmUpdateUser.mock
}

// When sets expectation for the GrpcClient.UpdateUser which will trigger the result defined by the following
// Then helper
func (mmUpdateUser *mGrpcClientMockUpdateUser) When(ctx context.Context, up1 *models.User) *GrpcClientMockUpdateUserExpectation {
	if mmUpdateUser.mock.funcUpdateUser != nil {
		mmUpdateUser.mock.t.Fatalf("GrpcClientMock.UpdateUser mock is already set by Set")
	}

	expectation := &GrpcClientMockUpdateUserExpectation{
		mock:   mmUpdateUser.mock,
		params: &GrpcClientMockUpdateUserParams{ctx, up1},
	}
	mmUpdateUser.expectations = append(mmUpdateUser.expectations, expectation)
	return expectation
}

// Then sets up GrpcClient.UpdateUser return parameters for the expectation previously defined by the When method
func (e *GrpcClientMockUpdateUserExpectation) Then(b1 bool, err error) *GrpcClientMock {
	e.results = &GrpcClientMockUpdateUserResults{b1, err}
	return e.mock
}

// UpdateUser implements GrpcClient
func (mmUpdateUser *GrpcClientMock) UpdateUser(ctx context.Context, up1 *models.User) (b1 bool, err error) {
	mm_atomic.AddUint64(&mmUpdateUser.beforeUpdateUserCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdateUser.afterUpdateUserCounter, 1)

	if mmUpdateUser.inspectFuncUpdateUser != nil {
		mmUpdateUser.inspectFuncUpdateUser(ctx, up1)
	}

	mm_params := &GrpcClientMockUpdateUserParams{ctx, up1}

	// Record call args
	mmUpdateUser.UpdateUserMock.mutex.Lock()
	mmUpdateUser.UpdateUserMock.callArgs = append(mmUpdateUser.UpdateUserMock.callArgs, mm_params)
	mmUpdateUser.UpdateUserMock.mutex.Unlock()

	for _, e := range mmUpdateUser.UpdateUserMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.b1, e.results.err
		}
	}

	if mmUpdateUser.UpdateUserMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdateUser.UpdateUserMock.defaultExpectation.Counter, 1)
		mm_want := mmUpdateUser.UpdateUserMock.defaultExpectation.params
		mm_got := GrpcClientMockUpdateUserParams{ctx, up1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUpdateUser.t.Errorf("GrpcClientMock.UpdateUser got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUpdateUser.UpdateUserMock.defaultExpectation.results
		if mm_results == nil {
			mmUpdateUser.t.Fatal("No results are set for the GrpcClientMock.UpdateUser")
		}
		return (*mm_results).b1, (*mm_results).err
	}
	if mmUpdateUser.funcUpdateUser != nil {
		return mmUpdateUser.funcUpdateUser(ctx, up1)
	}
	mmUpdateUser.t.Fatalf("Unexpected call to GrpcClientMock.UpdateUser. %v %v", ctx, up1)
	return
}

// UpdateUserAfterCounter returns a count of finished GrpcClientMock.UpdateUser invocations
func (mmUpdateUser *GrpcClientMock) UpdateUserAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateUser.afterUpdateUserCounter)
}

// UpdateUserBeforeCounter returns a count of GrpcClientMock.UpdateUser invocations
func (mmUpdateUser *GrpcClientMock) UpdateUserBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateUser.beforeUpdateUserCounter)
}

// Calls returns a list of arguments used in each call to GrpcClientMock.UpdateUser.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpdateUser *mGrpcClientMockUpdateUser) Calls() []*GrpcClientMockUpdateUserParams {
	mmUpdateUser.mutex.RLock()

	argCopy := make([]*GrpcClientMockUpdateUserParams, len(mmUpdateUser.callArgs))
	copy(argCopy, mmUpdateUser.callArgs)

	mmUpdateUser.mutex.RUnlock()

	return argCopy
}

// MinimockUpdateUserDone returns true if the count of the UpdateUser invocations corresponds
// the number of defined expectations
func (m *GrpcClientMock) MinimockUpdateUserDone() bool {
	for _, e := range m.UpdateUserMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateUserMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateUserCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdateUser != nil && mm_atomic.LoadUint64(&m.afterUpdateUserCounter) < 1 {
		return false
	}
	return true
}

// MinimockUpdateUserInspect logs each unmet expectation
func (m *GrpcClientMock) MinimockUpdateUserInspect() {
	for _, e := range m.UpdateUserMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to GrpcClientMock.UpdateUser with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateUserMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateUserCounter) < 1 {
		if m.UpdateUserMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to GrpcClientMock.UpdateUser")
		} else {
			m.t.Errorf("Expected call to GrpcClientMock.UpdateUser with params: %#v", *m.UpdateUserMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdateUser != nil && mm_atomic.LoadUint64(&m.afterUpdateUserCounter) < 1 {
		m.t.Error("Expected call to GrpcClientMock.UpdateUser")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *GrpcClientMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockCreateSubscriberInspect()

		m.MinimockCreateSubscriptionInspect()

		m.MinimockCreateUserInspect()

		m.MinimockDeleteSubscriberInspect()

		m.MinimockDeleteSubscriptionInspect()

		m.MinimockDeleteUserInspect()

		m.MinimockGetByTelegramIDInspect()

		m.MinimockGetSubscribersInspect()

		m.MinimockGetSubscriptionsForUserInspect()

		m.MinimockGetUsersByIDsInspect()

		m.MinimockReadSubscriberInspect()

		m.MinimockReadSubscriptionInspect()

		m.MinimockReadUserInspect()

		m.MinimockUpdateSubscriberInspect()

		m.MinimockUpdateSubscriptionInspect()

		m.MinimockUpdateUserInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *GrpcClientMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *GrpcClientMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateSubscriberDone() &&
		m.MinimockCreateSubscriptionDone() &&
		m.MinimockCreateUserDone() &&
		m.MinimockDeleteSubscriberDone() &&
		m.MinimockDeleteSubscriptionDone() &&
		m.MinimockDeleteUserDone() &&
		m.MinimockGetByTelegramIDDone() &&
		m.MinimockGetSubscribersDone() &&
		m.MinimockGetSubscriptionsForUserDone() &&
		m.MinimockGetUsersByIDsDone() &&
		m.MinimockReadSubscriberDone() &&
		m.MinimockReadSubscriptionDone() &&
		m.MinimockReadUserDone() &&
		m.MinimockUpdateSubscriberDone() &&
		m.MinimockUpdateSubscriptionDone() &&
		m.MinimockUpdateUserDone()
}
