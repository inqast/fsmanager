package user

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i github.com/inqast/fsmanager/internal/telegram/controller/user.Auth -o ./auth_mock_test.go -n AuthMock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/inqast/fsmanager/internal/models"
)

// AuthMock implements Auth
type AuthMock struct {
	t minimock.Tester

	funcAuthenticate          func(ctx context.Context, i1 int, s1 string) (up1 *models.User, err error)
	inspectFuncAuthenticate   func(ctx context.Context, i1 int, s1 string)
	afterAuthenticateCounter  uint64
	beforeAuthenticateCounter uint64
	AuthenticateMock          mAuthMockAuthenticate
}

// NewAuthMock returns a mock for Auth
func NewAuthMock(t minimock.Tester) *AuthMock {
	m := &AuthMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.AuthenticateMock = mAuthMockAuthenticate{mock: m}
	m.AuthenticateMock.callArgs = []*AuthMockAuthenticateParams{}

	return m
}

type mAuthMockAuthenticate struct {
	mock               *AuthMock
	defaultExpectation *AuthMockAuthenticateExpectation
	expectations       []*AuthMockAuthenticateExpectation

	callArgs []*AuthMockAuthenticateParams
	mutex    sync.RWMutex
}

// AuthMockAuthenticateExpectation specifies expectation struct of the Auth.Authenticate
type AuthMockAuthenticateExpectation struct {
	mock    *AuthMock
	params  *AuthMockAuthenticateParams
	results *AuthMockAuthenticateResults
	Counter uint64
}

// AuthMockAuthenticateParams contains parameters of the Auth.Authenticate
type AuthMockAuthenticateParams struct {
	ctx context.Context
	i1  int
	s1  string
}

// AuthMockAuthenticateResults contains results of the Auth.Authenticate
type AuthMockAuthenticateResults struct {
	up1 *models.User
	err error
}

// Expect sets up expected params for Auth.Authenticate
func (mmAuthenticate *mAuthMockAuthenticate) Expect(ctx context.Context, i1 int, s1 string) *mAuthMockAuthenticate {
	if mmAuthenticate.mock.funcAuthenticate != nil {
		mmAuthenticate.mock.t.Fatalf("AuthMock.Authenticate mock is already set by Set")
	}

	if mmAuthenticate.defaultExpectation == nil {
		mmAuthenticate.defaultExpectation = &AuthMockAuthenticateExpectation{}
	}

	mmAuthenticate.defaultExpectation.params = &AuthMockAuthenticateParams{ctx, i1, s1}
	for _, e := range mmAuthenticate.expectations {
		if minimock.Equal(e.params, mmAuthenticate.defaultExpectation.params) {
			mmAuthenticate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmAuthenticate.defaultExpectation.params)
		}
	}

	return mmAuthenticate
}

// Inspect accepts an inspector function that has same arguments as the Auth.Authenticate
func (mmAuthenticate *mAuthMockAuthenticate) Inspect(f func(ctx context.Context, i1 int, s1 string)) *mAuthMockAuthenticate {
	if mmAuthenticate.mock.inspectFuncAuthenticate != nil {
		mmAuthenticate.mock.t.Fatalf("Inspect function is already set for AuthMock.Authenticate")
	}

	mmAuthenticate.mock.inspectFuncAuthenticate = f

	return mmAuthenticate
}

// Return sets up results that will be returned by Auth.Authenticate
func (mmAuthenticate *mAuthMockAuthenticate) Return(up1 *models.User, err error) *AuthMock {
	if mmAuthenticate.mock.funcAuthenticate != nil {
		mmAuthenticate.mock.t.Fatalf("AuthMock.Authenticate mock is already set by Set")
	}

	if mmAuthenticate.defaultExpectation == nil {
		mmAuthenticate.defaultExpectation = &AuthMockAuthenticateExpectation{mock: mmAuthenticate.mock}
	}
	mmAuthenticate.defaultExpectation.results = &AuthMockAuthenticateResults{up1, err}
	return mmAuthenticate.mock
}

//Set uses given function f to mock the Auth.Authenticate method
func (mmAuthenticate *mAuthMockAuthenticate) Set(f func(ctx context.Context, i1 int, s1 string) (up1 *models.User, err error)) *AuthMock {
	if mmAuthenticate.defaultExpectation != nil {
		mmAuthenticate.mock.t.Fatalf("Default expectation is already set for the Auth.Authenticate method")
	}

	if len(mmAuthenticate.expectations) > 0 {
		mmAuthenticate.mock.t.Fatalf("Some expectations are already set for the Auth.Authenticate method")
	}

	mmAuthenticate.mock.funcAuthenticate = f
	return mmAuthenticate.mock
}

// When sets expectation for the Auth.Authenticate which will trigger the result defined by the following
// Then helper
func (mmAuthenticate *mAuthMockAuthenticate) When(ctx context.Context, i1 int, s1 string) *AuthMockAuthenticateExpectation {
	if mmAuthenticate.mock.funcAuthenticate != nil {
		mmAuthenticate.mock.t.Fatalf("AuthMock.Authenticate mock is already set by Set")
	}

	expectation := &AuthMockAuthenticateExpectation{
		mock:   mmAuthenticate.mock,
		params: &AuthMockAuthenticateParams{ctx, i1, s1},
	}
	mmAuthenticate.expectations = append(mmAuthenticate.expectations, expectation)
	return expectation
}

// Then sets up Auth.Authenticate return parameters for the expectation previously defined by the When method
func (e *AuthMockAuthenticateExpectation) Then(up1 *models.User, err error) *AuthMock {
	e.results = &AuthMockAuthenticateResults{up1, err}
	return e.mock
}

// Authenticate implements Auth
func (mmAuthenticate *AuthMock) Authenticate(ctx context.Context, i1 int, s1 string) (up1 *models.User, err error) {
	mm_atomic.AddUint64(&mmAuthenticate.beforeAuthenticateCounter, 1)
	defer mm_atomic.AddUint64(&mmAuthenticate.afterAuthenticateCounter, 1)

	if mmAuthenticate.inspectFuncAuthenticate != nil {
		mmAuthenticate.inspectFuncAuthenticate(ctx, i1, s1)
	}

	mm_params := &AuthMockAuthenticateParams{ctx, i1, s1}

	// Record call args
	mmAuthenticate.AuthenticateMock.mutex.Lock()
	mmAuthenticate.AuthenticateMock.callArgs = append(mmAuthenticate.AuthenticateMock.callArgs, mm_params)
	mmAuthenticate.AuthenticateMock.mutex.Unlock()

	for _, e := range mmAuthenticate.AuthenticateMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.up1, e.results.err
		}
	}

	if mmAuthenticate.AuthenticateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmAuthenticate.AuthenticateMock.defaultExpectation.Counter, 1)
		mm_want := mmAuthenticate.AuthenticateMock.defaultExpectation.params
		mm_got := AuthMockAuthenticateParams{ctx, i1, s1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmAuthenticate.t.Errorf("AuthMock.Authenticate got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmAuthenticate.AuthenticateMock.defaultExpectation.results
		if mm_results == nil {
			mmAuthenticate.t.Fatal("No results are set for the AuthMock.Authenticate")
		}
		return (*mm_results).up1, (*mm_results).err
	}
	if mmAuthenticate.funcAuthenticate != nil {
		return mmAuthenticate.funcAuthenticate(ctx, i1, s1)
	}
	mmAuthenticate.t.Fatalf("Unexpected call to AuthMock.Authenticate. %v %v %v", ctx, i1, s1)
	return
}

// AuthenticateAfterCounter returns a count of finished AuthMock.Authenticate invocations
func (mmAuthenticate *AuthMock) AuthenticateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAuthenticate.afterAuthenticateCounter)
}

// AuthenticateBeforeCounter returns a count of AuthMock.Authenticate invocations
func (mmAuthenticate *AuthMock) AuthenticateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAuthenticate.beforeAuthenticateCounter)
}

// Calls returns a list of arguments used in each call to AuthMock.Authenticate.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmAuthenticate *mAuthMockAuthenticate) Calls() []*AuthMockAuthenticateParams {
	mmAuthenticate.mutex.RLock()

	argCopy := make([]*AuthMockAuthenticateParams, len(mmAuthenticate.callArgs))
	copy(argCopy, mmAuthenticate.callArgs)

	mmAuthenticate.mutex.RUnlock()

	return argCopy
}

// MinimockAuthenticateDone returns true if the count of the Authenticate invocations corresponds
// the number of defined expectations
func (m *AuthMock) MinimockAuthenticateDone() bool {
	for _, e := range m.AuthenticateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.AuthenticateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterAuthenticateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAuthenticate != nil && mm_atomic.LoadUint64(&m.afterAuthenticateCounter) < 1 {
		return false
	}
	return true
}

// MinimockAuthenticateInspect logs each unmet expectation
func (m *AuthMock) MinimockAuthenticateInspect() {
	for _, e := range m.AuthenticateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AuthMock.Authenticate with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.AuthenticateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterAuthenticateCounter) < 1 {
		if m.AuthenticateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to AuthMock.Authenticate")
		} else {
			m.t.Errorf("Expected call to AuthMock.Authenticate with params: %#v", *m.AuthenticateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAuthenticate != nil && mm_atomic.LoadUint64(&m.afterAuthenticateCounter) < 1 {
		m.t.Error("Expected call to AuthMock.Authenticate")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *AuthMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockAuthenticateInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *AuthMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *AuthMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockAuthenticateDone()
}
