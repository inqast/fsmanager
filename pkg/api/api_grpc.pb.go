// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: api.proto

package api

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FamilySubClient is the client API for FamilySub service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FamilySubClient interface {
	CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*ID, error)
	ReadUser(ctx context.Context, in *ID, opts ...grpc.CallOption) (*User, error)
	UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteUser(ctx context.Context, in *ID, opts ...grpc.CallOption) (*empty.Empty, error)
	GetSubscriptionsForUser(ctx context.Context, in *ID, opts ...grpc.CallOption) (*GetSubscriptionsResponse, error)
	GetUserByTelegramID(ctx context.Context, in *ID, opts ...grpc.CallOption) (*User, error)
	GetUsersByIDs(ctx context.Context, in *GetUsersByIDsRequest, opts ...grpc.CallOption) (*GetUsersByIDsResponse, error)
	CreateSubscription(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (*ID, error)
	ReadSubscription(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Subscription, error)
	UpdateSubscription(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteSubscription(ctx context.Context, in *ID, opts ...grpc.CallOption) (*empty.Empty, error)
	GetSubscribersForSubscription(ctx context.Context, in *ID, opts ...grpc.CallOption) (*GetSubscribersResponse, error)
	CreateSubscriber(ctx context.Context, in *Subscriber, opts ...grpc.CallOption) (*ID, error)
	ReadSubscriber(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Subscriber, error)
	UpdateSubscriber(ctx context.Context, in *Subscriber, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteSubscriber(ctx context.Context, in *ID, opts ...grpc.CallOption) (*empty.Empty, error)
}

type familySubClient struct {
	cc grpc.ClientConnInterface
}

func NewFamilySubClient(cc grpc.ClientConnInterface) FamilySubClient {
	return &familySubClient{cc}
}

func (c *familySubClient) CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*ID, error) {
	out := new(ID)
	err := c.cc.Invoke(ctx, "/api.FamilySub/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familySubClient) ReadUser(ctx context.Context, in *ID, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/api.FamilySub/ReadUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familySubClient) UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.FamilySub/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familySubClient) DeleteUser(ctx context.Context, in *ID, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.FamilySub/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familySubClient) GetSubscriptionsForUser(ctx context.Context, in *ID, opts ...grpc.CallOption) (*GetSubscriptionsResponse, error) {
	out := new(GetSubscriptionsResponse)
	err := c.cc.Invoke(ctx, "/api.FamilySub/GetSubscriptionsForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familySubClient) GetUserByTelegramID(ctx context.Context, in *ID, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/api.FamilySub/GetUserByTelegramID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familySubClient) GetUsersByIDs(ctx context.Context, in *GetUsersByIDsRequest, opts ...grpc.CallOption) (*GetUsersByIDsResponse, error) {
	out := new(GetUsersByIDsResponse)
	err := c.cc.Invoke(ctx, "/api.FamilySub/GetUsersByIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familySubClient) CreateSubscription(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (*ID, error) {
	out := new(ID)
	err := c.cc.Invoke(ctx, "/api.FamilySub/CreateSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familySubClient) ReadSubscription(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Subscription, error) {
	out := new(Subscription)
	err := c.cc.Invoke(ctx, "/api.FamilySub/ReadSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familySubClient) UpdateSubscription(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.FamilySub/UpdateSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familySubClient) DeleteSubscription(ctx context.Context, in *ID, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.FamilySub/DeleteSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familySubClient) GetSubscribersForSubscription(ctx context.Context, in *ID, opts ...grpc.CallOption) (*GetSubscribersResponse, error) {
	out := new(GetSubscribersResponse)
	err := c.cc.Invoke(ctx, "/api.FamilySub/GetSubscribersForSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familySubClient) CreateSubscriber(ctx context.Context, in *Subscriber, opts ...grpc.CallOption) (*ID, error) {
	out := new(ID)
	err := c.cc.Invoke(ctx, "/api.FamilySub/CreateSubscriber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familySubClient) ReadSubscriber(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Subscriber, error) {
	out := new(Subscriber)
	err := c.cc.Invoke(ctx, "/api.FamilySub/ReadSubscriber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familySubClient) UpdateSubscriber(ctx context.Context, in *Subscriber, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.FamilySub/UpdateSubscriber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familySubClient) DeleteSubscriber(ctx context.Context, in *ID, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.FamilySub/DeleteSubscriber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FamilySubServer is the server API for FamilySub service.
// All implementations must embed UnimplementedFamilySubServer
// for forward compatibility
type FamilySubServer interface {
	CreateUser(context.Context, *User) (*ID, error)
	ReadUser(context.Context, *ID) (*User, error)
	UpdateUser(context.Context, *User) (*empty.Empty, error)
	DeleteUser(context.Context, *ID) (*empty.Empty, error)
	GetSubscriptionsForUser(context.Context, *ID) (*GetSubscriptionsResponse, error)
	GetUserByTelegramID(context.Context, *ID) (*User, error)
	GetUsersByIDs(context.Context, *GetUsersByIDsRequest) (*GetUsersByIDsResponse, error)
	CreateSubscription(context.Context, *Subscription) (*ID, error)
	ReadSubscription(context.Context, *ID) (*Subscription, error)
	UpdateSubscription(context.Context, *Subscription) (*empty.Empty, error)
	DeleteSubscription(context.Context, *ID) (*empty.Empty, error)
	GetSubscribersForSubscription(context.Context, *ID) (*GetSubscribersResponse, error)
	CreateSubscriber(context.Context, *Subscriber) (*ID, error)
	ReadSubscriber(context.Context, *ID) (*Subscriber, error)
	UpdateSubscriber(context.Context, *Subscriber) (*empty.Empty, error)
	DeleteSubscriber(context.Context, *ID) (*empty.Empty, error)
	mustEmbedUnimplementedFamilySubServer()
}

// UnimplementedFamilySubServer must be embedded to have forward compatible implementations.
type UnimplementedFamilySubServer struct {
}

func (UnimplementedFamilySubServer) CreateUser(context.Context, *User) (*ID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedFamilySubServer) ReadUser(context.Context, *ID) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadUser not implemented")
}
func (UnimplementedFamilySubServer) UpdateUser(context.Context, *User) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedFamilySubServer) DeleteUser(context.Context, *ID) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedFamilySubServer) GetSubscriptionsForUser(context.Context, *ID) (*GetSubscriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscriptionsForUser not implemented")
}
func (UnimplementedFamilySubServer) GetUserByTelegramID(context.Context, *ID) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByTelegramID not implemented")
}
func (UnimplementedFamilySubServer) GetUsersByIDs(context.Context, *GetUsersByIDsRequest) (*GetUsersByIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersByIDs not implemented")
}
func (UnimplementedFamilySubServer) CreateSubscription(context.Context, *Subscription) (*ID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubscription not implemented")
}
func (UnimplementedFamilySubServer) ReadSubscription(context.Context, *ID) (*Subscription, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadSubscription not implemented")
}
func (UnimplementedFamilySubServer) UpdateSubscription(context.Context, *Subscription) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubscription not implemented")
}
func (UnimplementedFamilySubServer) DeleteSubscription(context.Context, *ID) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSubscription not implemented")
}
func (UnimplementedFamilySubServer) GetSubscribersForSubscription(context.Context, *ID) (*GetSubscribersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscribersForSubscription not implemented")
}
func (UnimplementedFamilySubServer) CreateSubscriber(context.Context, *Subscriber) (*ID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubscriber not implemented")
}
func (UnimplementedFamilySubServer) ReadSubscriber(context.Context, *ID) (*Subscriber, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadSubscriber not implemented")
}
func (UnimplementedFamilySubServer) UpdateSubscriber(context.Context, *Subscriber) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubscriber not implemented")
}
func (UnimplementedFamilySubServer) DeleteSubscriber(context.Context, *ID) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSubscriber not implemented")
}
func (UnimplementedFamilySubServer) mustEmbedUnimplementedFamilySubServer() {}

// UnsafeFamilySubServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FamilySubServer will
// result in compilation errors.
type UnsafeFamilySubServer interface {
	mustEmbedUnimplementedFamilySubServer()
}

func RegisterFamilySubServer(s grpc.ServiceRegistrar, srv FamilySubServer) {
	s.RegisterService(&FamilySub_ServiceDesc, srv)
}

func _FamilySub_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FamilySubServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.FamilySub/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FamilySubServer).CreateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _FamilySub_ReadUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FamilySubServer).ReadUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.FamilySub/ReadUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FamilySubServer).ReadUser(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _FamilySub_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FamilySubServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.FamilySub/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FamilySubServer).UpdateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _FamilySub_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FamilySubServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.FamilySub/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FamilySubServer).DeleteUser(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _FamilySub_GetSubscriptionsForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FamilySubServer).GetSubscriptionsForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.FamilySub/GetSubscriptionsForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FamilySubServer).GetSubscriptionsForUser(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _FamilySub_GetUserByTelegramID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FamilySubServer).GetUserByTelegramID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.FamilySub/GetUserByTelegramID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FamilySubServer).GetUserByTelegramID(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _FamilySub_GetUsersByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersByIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FamilySubServer).GetUsersByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.FamilySub/GetUsersByIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FamilySubServer).GetUsersByIDs(ctx, req.(*GetUsersByIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FamilySub_CreateSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Subscription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FamilySubServer).CreateSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.FamilySub/CreateSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FamilySubServer).CreateSubscription(ctx, req.(*Subscription))
	}
	return interceptor(ctx, in, info, handler)
}

func _FamilySub_ReadSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FamilySubServer).ReadSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.FamilySub/ReadSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FamilySubServer).ReadSubscription(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _FamilySub_UpdateSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Subscription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FamilySubServer).UpdateSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.FamilySub/UpdateSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FamilySubServer).UpdateSubscription(ctx, req.(*Subscription))
	}
	return interceptor(ctx, in, info, handler)
}

func _FamilySub_DeleteSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FamilySubServer).DeleteSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.FamilySub/DeleteSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FamilySubServer).DeleteSubscription(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _FamilySub_GetSubscribersForSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FamilySubServer).GetSubscribersForSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.FamilySub/GetSubscribersForSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FamilySubServer).GetSubscribersForSubscription(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _FamilySub_CreateSubscriber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Subscriber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FamilySubServer).CreateSubscriber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.FamilySub/CreateSubscriber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FamilySubServer).CreateSubscriber(ctx, req.(*Subscriber))
	}
	return interceptor(ctx, in, info, handler)
}

func _FamilySub_ReadSubscriber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FamilySubServer).ReadSubscriber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.FamilySub/ReadSubscriber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FamilySubServer).ReadSubscriber(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _FamilySub_UpdateSubscriber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Subscriber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FamilySubServer).UpdateSubscriber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.FamilySub/UpdateSubscriber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FamilySubServer).UpdateSubscriber(ctx, req.(*Subscriber))
	}
	return interceptor(ctx, in, info, handler)
}

func _FamilySub_DeleteSubscriber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FamilySubServer).DeleteSubscriber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.FamilySub/DeleteSubscriber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FamilySubServer).DeleteSubscriber(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

// FamilySub_ServiceDesc is the grpc.ServiceDesc for FamilySub service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FamilySub_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.FamilySub",
	HandlerType: (*FamilySubServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _FamilySub_CreateUser_Handler,
		},
		{
			MethodName: "ReadUser",
			Handler:    _FamilySub_ReadUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _FamilySub_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _FamilySub_DeleteUser_Handler,
		},
		{
			MethodName: "GetSubscriptionsForUser",
			Handler:    _FamilySub_GetSubscriptionsForUser_Handler,
		},
		{
			MethodName: "GetUserByTelegramID",
			Handler:    _FamilySub_GetUserByTelegramID_Handler,
		},
		{
			MethodName: "GetUsersByIDs",
			Handler:    _FamilySub_GetUsersByIDs_Handler,
		},
		{
			MethodName: "CreateSubscription",
			Handler:    _FamilySub_CreateSubscription_Handler,
		},
		{
			MethodName: "ReadSubscription",
			Handler:    _FamilySub_ReadSubscription_Handler,
		},
		{
			MethodName: "UpdateSubscription",
			Handler:    _FamilySub_UpdateSubscription_Handler,
		},
		{
			MethodName: "DeleteSubscription",
			Handler:    _FamilySub_DeleteSubscription_Handler,
		},
		{
			MethodName: "GetSubscribersForSubscription",
			Handler:    _FamilySub_GetSubscribersForSubscription_Handler,
		},
		{
			MethodName: "CreateSubscriber",
			Handler:    _FamilySub_CreateSubscriber_Handler,
		},
		{
			MethodName: "ReadSubscriber",
			Handler:    _FamilySub_ReadSubscriber_Handler,
		},
		{
			MethodName: "UpdateSubscriber",
			Handler:    _FamilySub_UpdateSubscriber_Handler,
		},
		{
			MethodName: "DeleteSubscriber",
			Handler:    _FamilySub_DeleteSubscriber_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
