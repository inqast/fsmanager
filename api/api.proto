syntax = "proto3";

option go_package = "github.com/inqast/fsmanager/api";

package api;

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";

message ID {
  int64 id = 1;
}

message User {
  int64 id = 1;
  string name = 2;
  string pwd = 3;
  int64 telegram_id = 4;
  string createdAt = 5;
}

message GetUsersByIDsRequest {
  repeated int64 ids = 1;
}

message GetUsersByIDsResponse {
  repeated User users = 1;
}

message Subscription {
  int64 id = 1;
  int64 chat_id = 2;
  string serviceName = 3;
  int64 capacity = 4;
  int64 priceInCentiUnits = 5;
  int64  paymentDay = 6;
  string createdAt = 7;
}

message GetSubscriptionsResponse{
  repeated Subscription subscriptions = 1;
}

message Subscriber {
  int64 id = 1;
  int64 userID = 2;
  int64 subscriptionID = 3;
  bool isPaid = 4;
  bool isOwner = 5;
  string createdAt = 6;
}

message GetSubscribersResponse{
  repeated Subscriber subscribers = 1;
}

service FamilySub {
  rpc CreateUser(User) returns (ID) {
    option (google.api.http) = {
      post: "/v1/user"
      body: "*"
    };
  }
  rpc ReadUser(ID) returns (User) {
    option (google.api.http) = {
      get: "/v1/user/{id}"
    };
  }
  rpc UpdateUser(User) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/v1/user/{id}"
      body: "*"
    };
  }
  rpc DeleteUser(ID) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/user/{id}"
    };
  }
  rpc GetSubscriptionsForUser(ID) returns (GetSubscriptionsResponse) {
    option (google.api.http) = {
      get: "/v1/user/{id}/subscriptions"
    };
  }
  rpc GetUserByTelegramID(ID) returns (User) {
    option (google.api.http) = {
      post: "/v1/users/telegram"
      body: "*"
    };
  }
  rpc GetUsersByIDs(GetUsersByIDsRequest) returns (GetUsersByIDsResponse) {
    option (google.api.http) = {
      post: "/v1/users"
      body: "*"
    };
  }

  rpc CreateSubscription(Subscription) returns (ID) {
    option (google.api.http) = {
      post: "/v1/subscription"
      body: "*"
    };
  }
  rpc ReadSubscription(ID) returns (Subscription) {
    option (google.api.http) = {
      get: "/v1/subscription/{id}"
    };
  }
  rpc UpdateSubscription(Subscription) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/v1/subscription/{id}"
      body: "*"
    };
  }
  rpc DeleteSubscription(ID) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/subscription/{id}"
    };
  }
  rpc GetSubscribersForSubscription(ID) returns (GetSubscribersResponse) {
    option (google.api.http) = {
      get: "/v1/subscription/{id}/subscribers"
    };
  }

  rpc CreateSubscriber(Subscriber) returns (ID) {
    option (google.api.http) = {
      post: "/v1/subscriber"
      body: "*"
    };
  }
  rpc ReadSubscriber(ID) returns (Subscriber) {
    option (google.api.http) = {
      get: "/v1/subscriber/{id}"
    };
  }
  rpc UpdateSubscriber(Subscriber) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/v1/subscriber/{id}"
      body: "*"
    };
  }
  rpc DeleteSubscriber(ID) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/subscriber/{id}"
    };
  }
}
